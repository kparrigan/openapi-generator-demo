/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all directory groups
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDirectoryGroupResponse</returns>
        GetDirectoryGroupResponse DirectoryGroupsGet(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all directory groups
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDirectoryGroupResponse</returns>
        ApiResponse<GetDirectoryGroupResponse> DirectoryGroupsGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDirectoryGroupResponse</returns>
        DeleteDirectoryGroupResponse DirectoryGroupsIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDirectoryGroupResponse</returns>
        ApiResponse<DeleteDirectoryGroupResponse> DirectoryGroupsIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get directory group by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDirectoryGroupByIdResponse</returns>
        GetDirectoryGroupByIdResponse DirectoryGroupsIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get directory group by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDirectoryGroupByIdResponse</returns>
        ApiResponse<GetDirectoryGroupByIdResponse> DirectoryGroupsIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Add existing identities to directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutDirectoryGroupIdentitiesResponse</returns>
        PutDirectoryGroupIdentitiesResponse DirectoryGroupsIdIdentitiesPost(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Add existing identities to directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutDirectoryGroupIdentitiesResponse</returns>
        ApiResponse<PutDirectoryGroupIdentitiesResponse> DirectoryGroupsIdIdentitiesPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Remove identity from directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDirectoryGroupIdentityResponse</returns>
        DeleteDirectoryGroupIdentityResponse DirectoryGroupsIdIdentityIdentityIdDelete(int id, int identityId, int operationIndex = 0);

        /// <summary>
        /// Remove identity from directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDirectoryGroupIdentityResponse</returns>
        ApiResponse<DeleteDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfo(int id, int identityId, int operationIndex = 0);
        /// <summary>
        /// Create a new identity in directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostDirectoryGroupIdentityResponse</returns>
        PostDirectoryGroupIdentityResponse DirectoryGroupsIdIdentityPost(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new identity in directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostDirectoryGroupIdentityResponse</returns>
        ApiResponse<PostDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityPostWithHttpInfo(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0);
        /// <summary>
        /// Update directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutDirectoryGroupByIdResponse</returns>
        PutDirectoryGroupByIdResponse DirectoryGroupsIdPut(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0);

        /// <summary>
        /// Update directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutDirectoryGroupByIdResponse</returns>
        ApiResponse<PutDirectoryGroupByIdResponse> DirectoryGroupsIdPutWithHttpInfo(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0);
        /// <summary>
        /// Create a new directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostDirectoryGroupResponse</returns>
        PostDirectoryGroupResponse DirectoryGroupsPost(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostDirectoryGroupResponse</returns>
        ApiResponse<PostDirectoryGroupResponse> DirectoryGroupsPostWithHttpInfo(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0);
        /// <summary>
        /// Upload directory groups &amp; identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostUploadCsvResponse</returns>
        PostUploadCsvResponse DirectoryGroupsUploadPost(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Upload directory groups &amp; identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostUploadCsvResponse</returns>
        ApiResponse<PostUploadCsvResponse> DirectoryGroupsUploadPostWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all directory groups
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDirectoryGroupResponse</returns>
        System.Threading.Tasks.Task<GetDirectoryGroupResponse> DirectoryGroupsGetAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all directory groups
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDirectoryGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDirectoryGroupResponse>> DirectoryGroupsGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDirectoryGroupResponse</returns>
        System.Threading.Tasks.Task<DeleteDirectoryGroupResponse> DirectoryGroupsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDirectoryGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDirectoryGroupResponse>> DirectoryGroupsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get directory group by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDirectoryGroupByIdResponse</returns>
        System.Threading.Tasks.Task<GetDirectoryGroupByIdResponse> DirectoryGroupsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get directory group by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDirectoryGroupByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDirectoryGroupByIdResponse>> DirectoryGroupsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add existing identities to directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutDirectoryGroupIdentitiesResponse</returns>
        System.Threading.Tasks.Task<PutDirectoryGroupIdentitiesResponse> DirectoryGroupsIdIdentitiesPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add existing identities to directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutDirectoryGroupIdentitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutDirectoryGroupIdentitiesResponse>> DirectoryGroupsIdIdentitiesPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove identity from directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDirectoryGroupIdentityResponse</returns>
        System.Threading.Tasks.Task<DeleteDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityIdentityIdDeleteAsync(int id, int identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove identity from directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDirectoryGroupIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDirectoryGroupIdentityResponse>> DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfoAsync(int id, int identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new identity in directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostDirectoryGroupIdentityResponse</returns>
        System.Threading.Tasks.Task<PostDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityPostAsync(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new identity in directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostDirectoryGroupIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostDirectoryGroupIdentityResponse>> DirectoryGroupsIdIdentityPostWithHttpInfoAsync(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutDirectoryGroupByIdResponse</returns>
        System.Threading.Tasks.Task<PutDirectoryGroupByIdResponse> DirectoryGroupsIdPutAsync(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutDirectoryGroupByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutDirectoryGroupByIdResponse>> DirectoryGroupsIdPutWithHttpInfoAsync(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostDirectoryGroupResponse</returns>
        System.Threading.Tasks.Task<PostDirectoryGroupResponse> DirectoryGroupsPostAsync(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new directory group
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostDirectoryGroupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostDirectoryGroupResponse>> DirectoryGroupsPostWithHttpInfoAsync(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Upload directory groups &amp; identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostUploadCsvResponse</returns>
        System.Threading.Tasks.Task<PostUploadCsvResponse> DirectoryGroupsUploadPostAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Upload directory groups &amp; identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostUploadCsvResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostUploadCsvResponse>> DirectoryGroupsUploadPostWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectoryGroupsApi : IDirectoryGroupsApiSync, IDirectoryGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DirectoryGroupsApi : IDirectoryGroupsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectoryGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectoryGroupsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectoryGroupsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectoryGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DirectoryGroupsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all directory groups **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDirectoryGroupResponse</returns>
        public GetDirectoryGroupResponse DirectoryGroupsGet(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupResponse> localVarResponse = DirectoryGroupsGetWithHttpInfo(pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all directory groups **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDirectoryGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupResponse> DirectoryGroupsGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDirectoryGroupResponse>("/directory_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all directory groups **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDirectoryGroupResponse</returns>
        public async System.Threading.Tasks.Task<GetDirectoryGroupResponse> DirectoryGroupsGetAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupResponse> localVarResponse = await DirectoryGroupsGetWithHttpInfoAsync(pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all directory groups **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25,  max is 500 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDirectoryGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupResponse>> DirectoryGroupsGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDirectoryGroupResponse>("/directory_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDirectoryGroupResponse</returns>
        public DeleteDirectoryGroupResponse DirectoryGroupsIdDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupResponse> localVarResponse = DirectoryGroupsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDirectoryGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupResponse> DirectoryGroupsIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteDirectoryGroupResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDirectoryGroupResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDirectoryGroupResponse> DirectoryGroupsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupResponse> localVarResponse = await DirectoryGroupsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDirectoryGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupResponse>> DirectoryGroupsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteDirectoryGroupResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get directory group by ID **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDirectoryGroupByIdResponse</returns>
        public GetDirectoryGroupByIdResponse DirectoryGroupsIdGet(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupByIdResponse> localVarResponse = DirectoryGroupsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get directory group by ID **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDirectoryGroupByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupByIdResponse> DirectoryGroupsIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDirectoryGroupByIdResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get directory group by ID **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDirectoryGroupByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetDirectoryGroupByIdResponse> DirectoryGroupsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupByIdResponse> localVarResponse = await DirectoryGroupsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get directory group by ID **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDirectoryGroupByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetDirectoryGroupByIdResponse>> DirectoryGroupsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDirectoryGroupByIdResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add existing identities to directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutDirectoryGroupIdentitiesResponse</returns>
        public PutDirectoryGroupIdentitiesResponse DirectoryGroupsIdIdentitiesPost(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupIdentitiesResponse> localVarResponse = DirectoryGroupsIdIdentitiesPostWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add existing identities to directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutDirectoryGroupIdentitiesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupIdentitiesResponse> DirectoryGroupsIdIdentitiesPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling DirectoryGroupsApi->DirectoryGroupsIdIdentitiesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PutDirectoryGroupIdentitiesResponse>("/directory_groups/{id}/identities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add existing identities to directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutDirectoryGroupIdentitiesResponse</returns>
        public async System.Threading.Tasks.Task<PutDirectoryGroupIdentitiesResponse> DirectoryGroupsIdIdentitiesPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupIdentitiesResponse> localVarResponse = await DirectoryGroupsIdIdentitiesPostWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add existing identities to directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutDirectoryGroupIdentitiesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupIdentitiesResponse>> DirectoryGroupsIdIdentitiesPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling DirectoryGroupsApi->DirectoryGroupsIdIdentitiesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PutDirectoryGroupIdentitiesResponse>("/directory_groups/{id}/identities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove identity from directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDirectoryGroupIdentityResponse</returns>
        public DeleteDirectoryGroupIdentityResponse DirectoryGroupsIdIdentityIdentityIdDelete(int id, int identityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupIdentityResponse> localVarResponse = DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfo(id, identityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove identity from directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDirectoryGroupIdentityResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfo(int id, int identityId, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentityIdentityIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteDirectoryGroupIdentityResponse>("/directory_groups/{id}/identity/{identity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentityIdentityIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove identity from directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDirectoryGroupIdentityResponse</returns>
        public async System.Threading.Tasks.Task<DeleteDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityIdentityIdDeleteAsync(int id, int identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupIdentityResponse> localVarResponse = await DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfoAsync(id, identityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove identity from directory group **REQUIRED PERMISSION:** &#x60;directory_group:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The group ID</param>
        /// <param name="identityId">The ID of the identity to delete from the group</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDirectoryGroupIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteDirectoryGroupIdentityResponse>> DirectoryGroupsIdIdentityIdentityIdDeleteWithHttpInfoAsync(int id, int identityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("identity_id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(identityId)); // path parameter

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentityIdentityIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteDirectoryGroupIdentityResponse>("/directory_groups/{id}/identity/{identity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentityIdentityIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new identity in directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostDirectoryGroupIdentityResponse</returns>
        public PostDirectoryGroupIdentityResponse DirectoryGroupsIdIdentityPost(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupIdentityResponse> localVarResponse = DirectoryGroupsIdIdentityPostWithHttpInfo(id, postDirectoryGroupIdentityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new identity in directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostDirectoryGroupIdentityResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityPostWithHttpInfo(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postDirectoryGroupIdentityRequest' is set
            if (postDirectoryGroupIdentityRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postDirectoryGroupIdentityRequest' when calling DirectoryGroupsApi->DirectoryGroupsIdIdentityPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postDirectoryGroupIdentityRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentityPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostDirectoryGroupIdentityResponse>("/directory_groups/{id}/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new identity in directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostDirectoryGroupIdentityResponse</returns>
        public async System.Threading.Tasks.Task<PostDirectoryGroupIdentityResponse> DirectoryGroupsIdIdentityPostAsync(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupIdentityResponse> localVarResponse = await DirectoryGroupsIdIdentityPostWithHttpInfoAsync(id, postDirectoryGroupIdentityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new identity in directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to add the identity</param>
        /// <param name="postDirectoryGroupIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostDirectoryGroupIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupIdentityResponse>> DirectoryGroupsIdIdentityPostWithHttpInfoAsync(int id, PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postDirectoryGroupIdentityRequest' is set
            if (postDirectoryGroupIdentityRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postDirectoryGroupIdentityRequest' when calling DirectoryGroupsApi->DirectoryGroupsIdIdentityPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postDirectoryGroupIdentityRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdIdentityPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostDirectoryGroupIdentityResponse>("/directory_groups/{id}/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdIdentityPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update directory group **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutDirectoryGroupByIdResponse</returns>
        public PutDirectoryGroupByIdResponse DirectoryGroupsIdPut(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupByIdResponse> localVarResponse = DirectoryGroupsIdPutWithHttpInfo(id, putDirectoryGroupByIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update directory group **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutDirectoryGroupByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupByIdResponse> DirectoryGroupsIdPutWithHttpInfo(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'putDirectoryGroupByIdRequest' is set
            if (putDirectoryGroupByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putDirectoryGroupByIdRequest' when calling DirectoryGroupsApi->DirectoryGroupsIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putDirectoryGroupByIdRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutDirectoryGroupByIdResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update directory group **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutDirectoryGroupByIdResponse</returns>
        public async System.Threading.Tasks.Task<PutDirectoryGroupByIdResponse> DirectoryGroupsIdPutAsync(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupByIdResponse> localVarResponse = await DirectoryGroupsIdPutWithHttpInfoAsync(id, putDirectoryGroupByIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update directory group **REQUIRED PERMISSION:** &#x60;&#x60;directory_group:update&#x60;&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Allows updating the external ID, name, and description of a directory group. The external ID must be unique among the directory groups otherwise the API will return a &#x60;409 Conflict&#x60; error. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the directory group to update</param>
        /// <param name="putDirectoryGroupByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutDirectoryGroupByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutDirectoryGroupByIdResponse>> DirectoryGroupsIdPutWithHttpInfoAsync(int id, PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'putDirectoryGroupByIdRequest' is set
            if (putDirectoryGroupByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putDirectoryGroupByIdRequest' when calling DirectoryGroupsApi->DirectoryGroupsIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putDirectoryGroupByIdRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutDirectoryGroupByIdResponse>("/directory_groups/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostDirectoryGroupResponse</returns>
        public PostDirectoryGroupResponse DirectoryGroupsPost(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupResponse> localVarResponse = DirectoryGroupsPostWithHttpInfo(postDirectoryGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostDirectoryGroupResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupResponse> DirectoryGroupsPostWithHttpInfo(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postDirectoryGroupRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostDirectoryGroupResponse>("/directory_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostDirectoryGroupResponse</returns>
        public async System.Threading.Tasks.Task<PostDirectoryGroupResponse> DirectoryGroupsPostAsync(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupResponse> localVarResponse = await DirectoryGroupsPostWithHttpInfoAsync(postDirectoryGroupRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new directory group **REQUIRED PERMISSION:** &#x60;directory_group:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postDirectoryGroupRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostDirectoryGroupResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostDirectoryGroupResponse>> DirectoryGroupsPostWithHttpInfoAsync(PostDirectoryGroupRequest? postDirectoryGroupRequest = default(PostDirectoryGroupRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postDirectoryGroupRequest;

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostDirectoryGroupResponse>("/directory_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload directory groups &amp; identities **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostUploadCsvResponse</returns>
        public PostUploadCsvResponse DirectoryGroupsUploadPost(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostUploadCsvResponse> localVarResponse = DirectoryGroupsUploadPostWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload directory groups &amp; identities **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostUploadCsvResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostUploadCsvResponse> DirectoryGroupsUploadPostWithHttpInfo(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostUploadCsvResponse>("/directory_groups/upload", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Upload directory groups &amp; identities **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostUploadCsvResponse</returns>
        public async System.Threading.Tasks.Task<PostUploadCsvResponse> DirectoryGroupsUploadPostAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostUploadCsvResponse> localVarResponse = await DirectoryGroupsUploadPostWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Upload directory groups &amp; identities **REQUIRED PERMISSION:** &#x60;directory_group:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** CSV headers are &#x60;name,email,phone,userid,groupname,groupdesc,groupid&#x60;&lt;br /&gt; Extra columns can be added and will be processed as &#x60;extra_attributes&#x60;.&lt;br /&gt; Example CSV can be found [here](/api/v1/static/files/upload_example.csv).&lt;br /&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The file to upload (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostUploadCsvResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostUploadCsvResponse>> DirectoryGroupsUploadPostWithHttpInfoAsync(System.IO.Stream? file = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "DirectoryGroupsApi.DirectoryGroupsUploadPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostUploadCsvResponse>("/directory_groups/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DirectoryGroupsUploadPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
