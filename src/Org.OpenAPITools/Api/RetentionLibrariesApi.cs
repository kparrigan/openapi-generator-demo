/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionLibrariesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all retention libraries
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRetentionLibraryResponse</returns>
        GetRetentionLibraryResponse RetentionLibrariesGet(int operationIndex = 0);

        /// <summary>
        /// List all retention libraries
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRetentionLibraryResponse</returns>
        ApiResponse<GetRetentionLibraryResponse> RetentionLibrariesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Delete an retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteRetentionLibraryResponse</returns>
        DeleteRetentionLibraryResponse RetentionLibrariesIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteRetentionLibraryResponse</returns>
        ApiResponse<DeleteRetentionLibraryResponse> RetentionLibrariesIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get retention library by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRetentionLibraryByIdResponse</returns>
        GetRetentionLibraryByIdResponse RetentionLibrariesIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get retention library by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRetentionLibraryByIdResponse</returns>
        ApiResponse<GetRetentionLibraryByIdResponse> RetentionLibrariesIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutRetentionLibraryResponse</returns>
        PutRetentionLibraryResponse RetentionLibrariesIdPut(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0);

        /// <summary>
        /// Update retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutRetentionLibraryResponse</returns>
        ApiResponse<PutRetentionLibraryResponse> RetentionLibrariesIdPutWithHttpInfo(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0);
        /// <summary>
        /// Create a new retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostRetentionLibraryResponse</returns>
        PostRetentionLibraryResponse RetentionLibrariesPost(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostRetentionLibraryResponse</returns>
        ApiResponse<PostRetentionLibraryResponse> RetentionLibrariesPostWithHttpInfo(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionLibrariesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all retention libraries
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRetentionLibraryResponse</returns>
        System.Threading.Tasks.Task<GetRetentionLibraryResponse> RetentionLibrariesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all retention libraries
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRetentionLibraryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRetentionLibraryResponse>> RetentionLibrariesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRetentionLibraryResponse</returns>
        System.Threading.Tasks.Task<DeleteRetentionLibraryResponse> RetentionLibrariesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRetentionLibraryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRetentionLibraryResponse>> RetentionLibrariesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get retention library by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRetentionLibraryByIdResponse</returns>
        System.Threading.Tasks.Task<GetRetentionLibraryByIdResponse> RetentionLibrariesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get retention library by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRetentionLibraryByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRetentionLibraryByIdResponse>> RetentionLibrariesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutRetentionLibraryResponse</returns>
        System.Threading.Tasks.Task<PutRetentionLibraryResponse> RetentionLibrariesIdPutAsync(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutRetentionLibraryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutRetentionLibraryResponse>> RetentionLibrariesIdPutWithHttpInfoAsync(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostRetentionLibraryResponse</returns>
        System.Threading.Tasks.Task<PostRetentionLibraryResponse> RetentionLibrariesPostAsync(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new retention library
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostRetentionLibraryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostRetentionLibraryResponse>> RetentionLibrariesPostWithHttpInfoAsync(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRetentionLibrariesApi : IRetentionLibrariesApiSync, IRetentionLibrariesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RetentionLibrariesApi : IRetentionLibrariesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionLibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetentionLibrariesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionLibrariesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RetentionLibrariesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionLibrariesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RetentionLibrariesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionLibrariesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RetentionLibrariesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all retention libraries **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRetentionLibraryResponse</returns>
        public GetRetentionLibraryResponse RetentionLibrariesGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryResponse> localVarResponse = RetentionLibrariesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all retention libraries **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRetentionLibraryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryResponse> RetentionLibrariesGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRetentionLibraryResponse>("/retention_libraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all retention libraries **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRetentionLibraryResponse</returns>
        public async System.Threading.Tasks.Task<GetRetentionLibraryResponse> RetentionLibrariesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryResponse> localVarResponse = await RetentionLibrariesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all retention libraries **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Get a list of all the organizations retention libraries 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRetentionLibraryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryResponse>> RetentionLibrariesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRetentionLibraryResponse>("/retention_libraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteRetentionLibraryResponse</returns>
        public DeleteRetentionLibraryResponse RetentionLibrariesIdDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteRetentionLibraryResponse> localVarResponse = RetentionLibrariesIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteRetentionLibraryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteRetentionLibraryResponse> RetentionLibrariesIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteRetentionLibraryResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRetentionLibraryResponse</returns>
        public async System.Threading.Tasks.Task<DeleteRetentionLibraryResponse> RetentionLibrariesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteRetentionLibraryResponse> localVarResponse = await RetentionLibrariesIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRetentionLibraryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteRetentionLibraryResponse>> RetentionLibrariesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteRetentionLibraryResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get retention library by ID **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRetentionLibraryByIdResponse</returns>
        public GetRetentionLibraryByIdResponse RetentionLibrariesIdGet(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryByIdResponse> localVarResponse = RetentionLibrariesIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get retention library by ID **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRetentionLibraryByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryByIdResponse> RetentionLibrariesIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRetentionLibraryByIdResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get retention library by ID **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRetentionLibraryByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetRetentionLibraryByIdResponse> RetentionLibrariesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryByIdResponse> localVarResponse = await RetentionLibrariesIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get retention library by ID **REQUIRED PERMISSION:** &#x60;retention_libraries:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRetentionLibraryByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetRetentionLibraryByIdResponse>> RetentionLibrariesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRetentionLibraryByIdResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutRetentionLibraryResponse</returns>
        public PutRetentionLibraryResponse RetentionLibrariesIdPut(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutRetentionLibraryResponse> localVarResponse = RetentionLibrariesIdPutWithHttpInfo(id, putRetentionLibraryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutRetentionLibraryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutRetentionLibraryResponse> RetentionLibrariesIdPutWithHttpInfo(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'putRetentionLibraryRequest' is set
            if (putRetentionLibraryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putRetentionLibraryRequest' when calling RetentionLibrariesApi->RetentionLibrariesIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putRetentionLibraryRequest;

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutRetentionLibraryResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutRetentionLibraryResponse</returns>
        public async System.Threading.Tasks.Task<PutRetentionLibraryResponse> RetentionLibrariesIdPutAsync(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutRetentionLibraryResponse> localVarResponse = await RetentionLibrariesIdPutWithHttpInfoAsync(id, putRetentionLibraryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the retention library to update</param>
        /// <param name="putRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutRetentionLibraryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutRetentionLibraryResponse>> RetentionLibrariesIdPutWithHttpInfoAsync(int id, PutRetentionLibraryRequest putRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'putRetentionLibraryRequest' is set
            if (putRetentionLibraryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putRetentionLibraryRequest' when calling RetentionLibrariesApi->RetentionLibrariesIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putRetentionLibraryRequest;

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutRetentionLibraryResponse>("/retention_libraries/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostRetentionLibraryResponse</returns>
        public PostRetentionLibraryResponse RetentionLibrariesPost(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostRetentionLibraryResponse> localVarResponse = RetentionLibrariesPostWithHttpInfo(postRetentionLibraryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostRetentionLibraryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostRetentionLibraryResponse> RetentionLibrariesPostWithHttpInfo(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postRetentionLibraryRequest' is set
            if (postRetentionLibraryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postRetentionLibraryRequest' when calling RetentionLibrariesApi->RetentionLibrariesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postRetentionLibraryRequest;

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostRetentionLibraryResponse>("/retention_libraries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostRetentionLibraryResponse</returns>
        public async System.Threading.Tasks.Task<PostRetentionLibraryResponse> RetentionLibrariesPostAsync(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostRetentionLibraryResponse> localVarResponse = await RetentionLibrariesPostWithHttpInfoAsync(postRetentionLibraryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new retention library **REQUIRED PERMISSION:** &#x60;retention_libraries:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** Creates retention libraries and sets initial retention policies 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postRetentionLibraryRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostRetentionLibraryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostRetentionLibraryResponse>> RetentionLibrariesPostWithHttpInfoAsync(PostRetentionLibraryRequest postRetentionLibraryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postRetentionLibraryRequest' is set
            if (postRetentionLibraryRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postRetentionLibraryRequest' when calling RetentionLibrariesApi->RetentionLibrariesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postRetentionLibraryRequest;

            localVarRequestOptions.Operation = "RetentionLibrariesApi.RetentionLibrariesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostRetentionLibraryResponse>("/retention_libraries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetentionLibrariesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
