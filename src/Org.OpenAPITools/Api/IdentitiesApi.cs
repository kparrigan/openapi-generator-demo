/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteExtraAttributeResponse</returns>
        DeleteExtraAttributeResponse IdentitiesExtraAttributesIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteExtraAttributeResponse</returns>
        ApiResponse<DeleteExtraAttributeResponse> IdentitiesExtraAttributesIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Get extra_attribute by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExtraAttributeResponse</returns>
        GetExtraAttributeResponse IdentitiesExtraAttributesIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get extra_attribute by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExtraAttributeResponse</returns>
        ApiResponse<GetExtraAttributeResponse> IdentitiesExtraAttributesIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Make an extra_attribute the primary
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutExtraAttributePrimaryResponse</returns>
        PutExtraAttributePrimaryResponse IdentitiesExtraAttributesIdMakePrimaryPut(int id, int operationIndex = 0);

        /// <summary>
        /// Make an extra_attribute the primary
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutExtraAttributePrimaryResponse</returns>
        ApiResponse<PutExtraAttributePrimaryResponse> IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutExtraAttributeResponse</returns>
        PutExtraAttributeResponse IdentitiesExtraAttributesIdPut(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0);

        /// <summary>
        /// Update an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutExtraAttributeResponse</returns>
        ApiResponse<PutExtraAttributeResponse> IdentitiesExtraAttributesIdPutWithHttpInfo(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0);
        /// <summary>
        /// List all identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentitiesResponse</returns>
        GetIdentitiesResponse IdentitiesGet(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0);

        /// <summary>
        /// List all identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentitiesResponse</returns>
        ApiResponse<GetIdentitiesResponse> IdentitiesGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteIdentityByIdResponse</returns>
        DeleteIdentityByIdResponse IdentitiesIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteIdentityByIdResponse</returns>
        ApiResponse<DeleteIdentityByIdResponse> IdentitiesIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Create a new extra_attribute on an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostExtraAttributeResponse</returns>
        PostExtraAttributeResponse IdentitiesIdExtraAttributesPost(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0);

        /// <summary>
        /// Create a new extra_attribute on an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostExtraAttributeResponse</returns>
        ApiResponse<PostExtraAttributeResponse> IdentitiesIdExtraAttributesPostWithHttpInfo(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0);
        /// <summary>
        /// Get identity by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentityByIdResponse</returns>
        GetIdentityByIdResponse IdentitiesIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get identity by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentityByIdResponse</returns>
        ApiResponse<GetIdentityByIdResponse> IdentitiesIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Update identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutIdentityByIdResponse</returns>
        PutIdentityByIdResponse IdentitiesIdPut(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0);

        /// <summary>
        /// Update identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutIdentityByIdResponse</returns>
        ApiResponse<PutIdentityByIdResponse> IdentitiesIdPutWithHttpInfo(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0);
        /// <summary>
        /// Get identity risk log
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRiskLogResponse</returns>
        GetRiskLogResponse IdentitiesIdRiskGet(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get identity risk log
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRiskLogResponse</returns>
        ApiResponse<GetRiskLogResponse> IdentitiesIdRiskGetWithHttpInfo(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Flag the identity as risky
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostIdentityRiskResponse</returns>
        PostIdentityRiskResponse IdentitiesIdRiskPost(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0);

        /// <summary>
        /// Flag the identity as risky
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostIdentityRiskResponse</returns>
        ApiResponse<PostIdentityRiskResponse> IdentitiesIdRiskPostWithHttpInfo(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a new identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostIdentityResponse</returns>
        PostIdentityResponse IdentitiesPost(PostIdentityRequest postIdentityRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostIdentityResponse</returns>
        ApiResponse<PostIdentityResponse> IdentitiesPostWithHttpInfo(PostIdentityRequest postIdentityRequest, int operationIndex = 0);
        /// <summary>
        /// Merge two identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutMergeIdentitiesResponse</returns>
        PutMergeIdentitiesResponse IdentitiesPut(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0);

        /// <summary>
        /// Merge two identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutMergeIdentitiesResponse</returns>
        ApiResponse<PutMergeIdentitiesResponse> IdentitiesPutWithHttpInfo(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0);
        /// <summary>
        /// Search Identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentitiesBySearchResponse</returns>
        GetIdentitiesBySearchResponse IdentitiesSearchGet(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Search Identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentitiesBySearchResponse</returns>
        ApiResponse<GetIdentitiesBySearchResponse> IdentitiesSearchGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteExtraAttributeResponse</returns>
        System.Threading.Tasks.Task<DeleteExtraAttributeResponse> IdentitiesExtraAttributesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteExtraAttributeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteExtraAttributeResponse>> IdentitiesExtraAttributesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get extra_attribute by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExtraAttributeResponse</returns>
        System.Threading.Tasks.Task<GetExtraAttributeResponse> IdentitiesExtraAttributesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get extra_attribute by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExtraAttributeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtraAttributeResponse>> IdentitiesExtraAttributesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Make an extra_attribute the primary
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutExtraAttributePrimaryResponse</returns>
        System.Threading.Tasks.Task<PutExtraAttributePrimaryResponse> IdentitiesExtraAttributesIdMakePrimaryPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Make an extra_attribute the primary
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutExtraAttributePrimaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutExtraAttributePrimaryResponse>> IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutExtraAttributeResponse</returns>
        System.Threading.Tasks.Task<PutExtraAttributeResponse> IdentitiesExtraAttributesIdPutAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an identity extra_attribute
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutExtraAttributeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutExtraAttributeResponse>> IdentitiesExtraAttributesIdPutWithHttpInfoAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentitiesResponse</returns>
        System.Threading.Tasks.Task<GetIdentitiesResponse> IdentitiesGetAsync(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIdentitiesResponse>> IdentitiesGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteIdentityByIdResponse</returns>
        System.Threading.Tasks.Task<DeleteIdentityByIdResponse> IdentitiesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteIdentityByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteIdentityByIdResponse>> IdentitiesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new extra_attribute on an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostExtraAttributeResponse</returns>
        System.Threading.Tasks.Task<PostExtraAttributeResponse> IdentitiesIdExtraAttributesPostAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new extra_attribute on an identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostExtraAttributeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostExtraAttributeResponse>> IdentitiesIdExtraAttributesPostWithHttpInfoAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get identity by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentityByIdResponse</returns>
        System.Threading.Tasks.Task<GetIdentityByIdResponse> IdentitiesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get identity by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentityByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIdentityByIdResponse>> IdentitiesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutIdentityByIdResponse</returns>
        System.Threading.Tasks.Task<PutIdentityByIdResponse> IdentitiesIdPutAsync(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutIdentityByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutIdentityByIdResponse>> IdentitiesIdPutWithHttpInfoAsync(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get identity risk log
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRiskLogResponse</returns>
        System.Threading.Tasks.Task<GetRiskLogResponse> IdentitiesIdRiskGetAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get identity risk log
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRiskLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRiskLogResponse>> IdentitiesIdRiskGetWithHttpInfoAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Flag the identity as risky
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostIdentityRiskResponse</returns>
        System.Threading.Tasks.Task<PostIdentityRiskResponse> IdentitiesIdRiskPostAsync(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Flag the identity as risky
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostIdentityRiskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostIdentityRiskResponse>> IdentitiesIdRiskPostWithHttpInfoAsync(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostIdentityResponse</returns>
        System.Threading.Tasks.Task<PostIdentityResponse> IdentitiesPostAsync(PostIdentityRequest postIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new identity
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostIdentityResponse>> IdentitiesPostWithHttpInfoAsync(PostIdentityRequest postIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Merge two identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutMergeIdentitiesResponse</returns>
        System.Threading.Tasks.Task<PutMergeIdentitiesResponse> IdentitiesPutAsync(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Merge two identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutMergeIdentitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PutMergeIdentitiesResponse>> IdentitiesPutWithHttpInfoAsync(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search Identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentitiesBySearchResponse</returns>
        System.Threading.Tasks.Task<GetIdentitiesBySearchResponse> IdentitiesSearchGetAsync(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search Identities
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentitiesBySearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetIdentitiesBySearchResponse>> IdentitiesSearchGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApi : IIdentitiesApiSync, IIdentitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentitiesApi : IIdentitiesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentitiesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IdentitiesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteExtraAttributeResponse</returns>
        public DeleteExtraAttributeResponse IdentitiesExtraAttributesIdDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteExtraAttributeResponse> localVarResponse = IdentitiesExtraAttributesIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteExtraAttributeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteExtraAttributeResponse> IdentitiesExtraAttributesIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteExtraAttributeResponse</returns>
        public async System.Threading.Tasks.Task<DeleteExtraAttributeResponse> IdentitiesExtraAttributesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteExtraAttributeResponse> localVarResponse = await IdentitiesExtraAttributesIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteExtraAttributeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteExtraAttributeResponse>> IdentitiesExtraAttributesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get extra_attribute by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetExtraAttributeResponse</returns>
        public GetExtraAttributeResponse IdentitiesExtraAttributesIdGet(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetExtraAttributeResponse> localVarResponse = IdentitiesExtraAttributesIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get extra_attribute by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetExtraAttributeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetExtraAttributeResponse> IdentitiesExtraAttributesIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get extra_attribute by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetExtraAttributeResponse</returns>
        public async System.Threading.Tasks.Task<GetExtraAttributeResponse> IdentitiesExtraAttributesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetExtraAttributeResponse> localVarResponse = await IdentitiesExtraAttributesIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get extra_attribute by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to get</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetExtraAttributeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetExtraAttributeResponse>> IdentitiesExtraAttributesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an extra_attribute the primary **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutExtraAttributePrimaryResponse</returns>
        public PutExtraAttributePrimaryResponse IdentitiesExtraAttributesIdMakePrimaryPut(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutExtraAttributePrimaryResponse> localVarResponse = IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an extra_attribute the primary **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutExtraAttributePrimaryResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutExtraAttributePrimaryResponse> IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdMakePrimaryPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutExtraAttributePrimaryResponse>("/identities/extra_attributes/{id}/make_primary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdMakePrimaryPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an extra_attribute the primary **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutExtraAttributePrimaryResponse</returns>
        public async System.Threading.Tasks.Task<PutExtraAttributePrimaryResponse> IdentitiesExtraAttributesIdMakePrimaryPutAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutExtraAttributePrimaryResponse> localVarResponse = await IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an extra_attribute the primary **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Makes the extra_attribute the primary attribute on the identity by swapping the values. &lt;br /&gt; Example: Given the following identity:&lt;br /&gt; &#x60;&#x60;&#x60; json {     \&quot;identity\&quot;: {       \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,       \&quot;email\&quot;: \&quot;john.smith@gmail.com\&quot;, &lt;- - Notice the email before API call       \&quot;external_id\&quot;: \&quot;it-236\&quot;,       \&quot;extra_attributes\&quot;: [         {           \&quot;field\&quot;: \&quot;email\&quot;,           \&quot;id\&quot;: 42035,           \&quot;value\&quot;: \&quot;john@smith.com\&quot; &lt;- - Notice the email before API call         }       ],       \&quot;globally_risky\&quot;: false,       \&quot;id\&quot;: 88484,       \&quot;is_submitter\&quot;: true,       \&quot;name\&quot;: \&quot;John Smith\&quot;,       \&quot;participant\&quot;: false,       \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,       \&quot;risky\&quot;: false,       \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; A call to &#x60;/identities/extra_attributes/42035/make_primary&#x60; would result in the following: &#x60;&#x60;&#x60; json {   \&quot;identity\&quot;: {     \&quot;created_at\&quot;: \&quot;2021-06-16T01:37:04.262Z\&quot;,     \&quot;email\&quot;: \&quot;john@smith.com\&quot;, &lt;- - Notice the swapped email after API call     \&quot;external_id\&quot;: \&quot;it-236\&quot;,     \&quot;extra_attributes\&quot;: [       {         \&quot;field\&quot;: \&quot;email\&quot;,         \&quot;id\&quot;: 42035,         \&quot;value\&quot;: \&quot;john.smith@gmail.com\&quot; &lt;- - Notice the swapped email after API call       }     ],     \&quot;globally_risky\&quot;: false,     \&quot;id\&quot;: 88484,     \&quot;is_submitter\&quot;: true,     \&quot;name\&quot;: \&quot;John Smith\&quot;,     \&quot;participant\&quot;: false,     \&quot;phone_number\&quot;: \&quot;555-867-5309\&quot;,     \&quot;risky\&quot;: false,     \&quot;updated_at\&quot;: \&quot;2022-10-12T02:29:49.146Z\&quot;   } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to make primary</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutExtraAttributePrimaryResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutExtraAttributePrimaryResponse>> IdentitiesExtraAttributesIdMakePrimaryPutWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdMakePrimaryPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutExtraAttributePrimaryResponse>("/identities/extra_attributes/{id}/make_primary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdMakePrimaryPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutExtraAttributeResponse</returns>
        public PutExtraAttributeResponse IdentitiesExtraAttributesIdPut(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutExtraAttributeResponse> localVarResponse = IdentitiesExtraAttributesIdPutWithHttpInfo(id, extraAttributeBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutExtraAttributeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutExtraAttributeResponse> IdentitiesExtraAttributesIdPutWithHttpInfo(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0)
        {
            // verify the required parameter 'extraAttributeBody' is set
            if (extraAttributeBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'extraAttributeBody' when calling IdentitiesApi->IdentitiesExtraAttributesIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extraAttributeBody;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutExtraAttributeResponse</returns>
        public async System.Threading.Tasks.Task<PutExtraAttributeResponse> IdentitiesExtraAttributesIdPutAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutExtraAttributeResponse> localVarResponse = await IdentitiesExtraAttributesIdPutWithHttpInfoAsync(id, extraAttributeBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an identity extra_attribute **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The extra_attribute ID to update</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutExtraAttributeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutExtraAttributeResponse>> IdentitiesExtraAttributesIdPutWithHttpInfoAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'extraAttributeBody' is set
            if (extraAttributeBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'extraAttributeBody' when calling IdentitiesApi->IdentitiesExtraAttributesIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extraAttributeBody;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesExtraAttributesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutExtraAttributeResponse>("/identities/extra_attributes/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesExtraAttributesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentitiesResponse</returns>
        public GetIdentitiesResponse IdentitiesGet(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentitiesResponse> localVarResponse = IdentitiesGetWithHttpInfo(pageToken, max, query);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentitiesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetIdentitiesResponse> IdentitiesGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIdentitiesResponse>("/identities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentitiesResponse</returns>
        public async System.Threading.Tasks.Task<GetIdentitiesResponse> IdentitiesGetAsync(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentitiesResponse> localVarResponse = await IdentitiesGetWithHttpInfoAsync(pageToken, max, query, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="query">The value of the identities extra_attributes. If this query is passed, the query will search the identities: &#x60;email, name, phone_number&#x60; and &#x60;external_id&#x60; fields for a matching value. If &#x60;query&#x3D;@thetalake.com&#x60;, the result will have all identities with &#x60;@thetalake.com&#x60; value in their &#x60;email, name, phone_number, external_id&#x60;.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentitiesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetIdentitiesResponse>> IdentitiesGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), string? query = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIdentitiesResponse>("/identities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an identity **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteIdentityByIdResponse</returns>
        public DeleteIdentityByIdResponse IdentitiesIdDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteIdentityByIdResponse> localVarResponse = IdentitiesIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an identity **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteIdentityByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DeleteIdentityByIdResponse> IdentitiesIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an identity **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteIdentityByIdResponse</returns>
        public async System.Threading.Tasks.Task<DeleteIdentityByIdResponse> IdentitiesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DeleteIdentityByIdResponse> localVarResponse = await IdentitiesIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an identity **REQUIRED PERMISSION:** &#x60;identities:delete&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Identities have many connections including to individual media records and cannot be deleted when they are connected 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteIdentityByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DeleteIdentityByIdResponse>> IdentitiesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new extra_attribute on an identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostExtraAttributeResponse</returns>
        public PostExtraAttributeResponse IdentitiesIdExtraAttributesPost(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostExtraAttributeResponse> localVarResponse = IdentitiesIdExtraAttributesPostWithHttpInfo(id, extraAttributeBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new extra_attribute on an identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostExtraAttributeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostExtraAttributeResponse> IdentitiesIdExtraAttributesPostWithHttpInfo(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0)
        {
            // verify the required parameter 'extraAttributeBody' is set
            if (extraAttributeBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'extraAttributeBody' when calling IdentitiesApi->IdentitiesIdExtraAttributesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extraAttributeBody;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdExtraAttributesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostExtraAttributeResponse>("/identities/{id}/extra_attributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdExtraAttributesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new extra_attribute on an identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostExtraAttributeResponse</returns>
        public async System.Threading.Tasks.Task<PostExtraAttributeResponse> IdentitiesIdExtraAttributesPostAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostExtraAttributeResponse> localVarResponse = await IdentitiesIdExtraAttributesPostWithHttpInfoAsync(id, extraAttributeBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new extra_attribute on an identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the identity to add an the extra attribute on</param>
        /// <param name="extraAttributeBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostExtraAttributeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostExtraAttributeResponse>> IdentitiesIdExtraAttributesPostWithHttpInfoAsync(int id, ExtraAttributeBody extraAttributeBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'extraAttributeBody' is set
            if (extraAttributeBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'extraAttributeBody' when calling IdentitiesApi->IdentitiesIdExtraAttributesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = extraAttributeBody;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdExtraAttributesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostExtraAttributeResponse>("/identities/{id}/extra_attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdExtraAttributesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentityByIdResponse</returns>
        public GetIdentityByIdResponse IdentitiesIdGet(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentityByIdResponse> localVarResponse = IdentitiesIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentityByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetIdentityByIdResponse> IdentitiesIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentityByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetIdentityByIdResponse> IdentitiesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentityByIdResponse> localVarResponse = await IdentitiesIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity by ID **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentityByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetIdentityByIdResponse>> IdentitiesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutIdentityByIdResponse</returns>
        public PutIdentityByIdResponse IdentitiesIdPut(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutIdentityByIdResponse> localVarResponse = IdentitiesIdPutWithHttpInfo(id, putIdentityByIdRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutIdentityByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutIdentityByIdResponse> IdentitiesIdPutWithHttpInfo(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0)
        {
            // verify the required parameter 'putIdentityByIdRequest' is set
            if (putIdentityByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putIdentityByIdRequest' when calling IdentitiesApi->IdentitiesIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putIdentityByIdRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutIdentityByIdResponse</returns>
        public async System.Threading.Tasks.Task<PutIdentityByIdResponse> IdentitiesIdPutAsync(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutIdentityByIdResponse> localVarResponse = await IdentitiesIdPutWithHttpInfoAsync(id, putIdentityByIdRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update identity **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to update</param>
        /// <param name="putIdentityByIdRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutIdentityByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutIdentityByIdResponse>> IdentitiesIdPutWithHttpInfoAsync(int id, PutIdentityByIdRequest putIdentityByIdRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'putIdentityByIdRequest' is set
            if (putIdentityByIdRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'putIdentityByIdRequest' when calling IdentitiesApi->IdentitiesIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putIdentityByIdRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutIdentityByIdResponse>("/identities/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity risk log **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRiskLogResponse</returns>
        public GetRiskLogResponse IdentitiesIdRiskGet(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetRiskLogResponse> localVarResponse = IdentitiesIdRiskGetWithHttpInfo(id, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity risk log **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRiskLogResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetRiskLogResponse> IdentitiesIdRiskGetWithHttpInfo(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdRiskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRiskLogResponse>("/identities/{id}/risk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdRiskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get identity risk log **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRiskLogResponse</returns>
        public async System.Threading.Tasks.Task<GetRiskLogResponse> IdentitiesIdRiskGetAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetRiskLogResponse> localVarResponse = await IdentitiesIdRiskGetWithHttpInfoAsync(id, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get identity risk log **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to retrieve the risk log</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRiskLogResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetRiskLogResponse>> IdentitiesIdRiskGetWithHttpInfoAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdRiskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRiskLogResponse>("/identities/{id}/risk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdRiskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag the identity as risky **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostIdentityRiskResponse</returns>
        public PostIdentityRiskResponse IdentitiesIdRiskPost(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostIdentityRiskResponse> localVarResponse = IdentitiesIdRiskPostWithHttpInfo(id, postIdentityRiskRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag the identity as risky **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostIdentityRiskResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostIdentityRiskResponse> IdentitiesIdRiskPostWithHttpInfo(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postIdentityRiskRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdRiskPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostIdentityRiskResponse>("/identities/{id}/risk", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdRiskPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Flag the identity as risky **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostIdentityRiskResponse</returns>
        public async System.Threading.Tasks.Task<PostIdentityRiskResponse> IdentitiesIdRiskPostAsync(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostIdentityRiskResponse> localVarResponse = await IdentitiesIdRiskPostWithHttpInfoAsync(id, postIdentityRiskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Flag the identity as risky **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The identity ID to flag as risky</param>
        /// <param name="postIdentityRiskRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostIdentityRiskResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostIdentityRiskResponse>> IdentitiesIdRiskPostWithHttpInfoAsync(int id, PostIdentityRiskRequest? postIdentityRiskRequest = default(PostIdentityRiskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postIdentityRiskRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesIdRiskPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostIdentityRiskResponse>("/identities/{id}/risk", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesIdRiskPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new identity **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostIdentityResponse</returns>
        public PostIdentityResponse IdentitiesPost(PostIdentityRequest postIdentityRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostIdentityResponse> localVarResponse = IdentitiesPostWithHttpInfo(postIdentityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new identity **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostIdentityResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostIdentityResponse> IdentitiesPostWithHttpInfo(PostIdentityRequest postIdentityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postIdentityRequest' is set
            if (postIdentityRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postIdentityRequest' when calling IdentitiesApi->IdentitiesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postIdentityRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostIdentityResponse>("/identities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new identity **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostIdentityResponse</returns>
        public async System.Threading.Tasks.Task<PostIdentityResponse> IdentitiesPostAsync(PostIdentityRequest postIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostIdentityResponse> localVarResponse = await IdentitiesPostWithHttpInfoAsync(postIdentityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new identity **REQUIRED PERMISSION:** &#x60;identities:create&#x60;   **RATE LIMIT:** &#x60;light&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIdentityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostIdentityResponse>> IdentitiesPostWithHttpInfoAsync(PostIdentityRequest postIdentityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postIdentityRequest' is set
            if (postIdentityRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postIdentityRequest' when calling IdentitiesApi->IdentitiesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postIdentityRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostIdentityResponse>("/identities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge two identities **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PutMergeIdentitiesResponse</returns>
        public PutMergeIdentitiesResponse IdentitiesPut(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PutMergeIdentitiesResponse> localVarResponse = IdentitiesPutWithHttpInfo(identitiesPutRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge two identities **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PutMergeIdentitiesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PutMergeIdentitiesResponse> IdentitiesPutWithHttpInfo(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0)
        {
            // verify the required parameter 'identitiesPutRequest' is set
            if (identitiesPutRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identitiesPutRequest' when calling IdentitiesApi->IdentitiesPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identitiesPutRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PutMergeIdentitiesResponse>("/identities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge two identities **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PutMergeIdentitiesResponse</returns>
        public async System.Threading.Tasks.Task<PutMergeIdentitiesResponse> IdentitiesPutAsync(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PutMergeIdentitiesResponse> localVarResponse = await IdentitiesPutWithHttpInfoAsync(identitiesPutRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge two identities **REQUIRED PERMISSION:** &#x60;identities:update&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE:** Merges the passed identities into one, updates relationships and deletes the first identity. An &#x60;extra_attributes&#x60; is added to indicating the merged identity. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identitiesPutRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PutMergeIdentitiesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PutMergeIdentitiesResponse>> IdentitiesPutWithHttpInfoAsync(IdentitiesPutRequest identitiesPutRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'identitiesPutRequest' is set
            if (identitiesPutRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'identitiesPutRequest' when calling IdentitiesApi->IdentitiesPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = identitiesPutRequest;

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PutMergeIdentitiesResponse>("/identities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetIdentitiesBySearchResponse</returns>
        public GetIdentitiesBySearchResponse IdentitiesSearchGet(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentitiesBySearchResponse> localVarResponse = IdentitiesSearchGetWithHttpInfo(pageToken, max, start, end, managed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetIdentitiesBySearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetIdentitiesBySearchResponse> IdentitiesSearchGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (managed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "managed", managed));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesSearchGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetIdentitiesBySearchResponse>("/identities/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesSearchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetIdentitiesBySearchResponse</returns>
        public async System.Threading.Tasks.Task<GetIdentitiesBySearchResponse> IdentitiesSearchGetAsync(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetIdentitiesBySearchResponse> localVarResponse = await IdentitiesSearchGetWithHttpInfoAsync(pageToken, max, start, end, managed, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Identities **REQUIRED PERMISSION:** &#x60;identities:read&#x60;   **RATE LIMIT:** &#x60;light&#x60;   **NOTE**: If the start or end parameters are specified, the search will return any identities that were created or updated within the specified bounds 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="start">**Inclusive** start of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="end">**Inclusive** end of the date range using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="managed">Denotes if only managed identies should be returned. Identities are managed if they are created by the API, CSV upload, or Active Directory sync (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetIdentitiesBySearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetIdentitiesBySearchResponse>> IdentitiesSearchGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), DateTime? start = default(DateTime?), DateTime? end = default(DateTime?), bool? managed = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (managed != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "managed", managed));
            }

            localVarRequestOptions.Operation = "IdentitiesApi.IdentitiesSearchGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetIdentitiesBySearchResponse>("/identities/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentitiesSearchGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
