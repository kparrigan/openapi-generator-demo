/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISupervisionSpacesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all supervision spaces
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpacesResponse</returns>
        GetSupervisionSpacesResponse SupervisionSpacesGet(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all supervision spaces
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpacesResponse</returns>
        ApiResponse<GetSupervisionSpacesResponse> SupervisionSpacesGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Delete supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Delete supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Remove directory groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdDirectoryGroupsDelete(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Remove directory groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Add directory groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdDirectoryGroupsPost(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Add directory groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Get supervision space by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Get supervision space by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Remove participants from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdParticipantsDelete(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0);

        /// <summary>
        /// Remove participants from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsDeleteWithHttpInfo(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0);
        /// <summary>
        /// Add participants to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdParticipantsPost(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0);

        /// <summary>
        /// Add participants to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsPostWithHttpInfo(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0);
        /// <summary>
        /// Update supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdPut(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0);

        /// <summary>
        /// Update supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdPutWithHttpInfo(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0);
        /// <summary>
        /// Remove user groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdUserGroupsDelete(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Remove user groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Add user groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdUserGroupsPost(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Add user groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Remove users from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdUsersDelete(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Remove users from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Add users to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        GetSupervisionSpaceByIdResponse SupervisionSpacesIdUsersPost(int id, List<int> requestBody, int operationIndex = 0);

        /// <summary>
        /// Add users to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0);
        /// <summary>
        /// Create a new supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSupervisionSpacesResponse</returns>
        PostSupervisionSpacesResponse SupervisionSpacesPost(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSupervisionSpacesResponse</returns>
        ApiResponse<PostSupervisionSpacesResponse> SupervisionSpacesPostWithHttpInfo(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISupervisionSpacesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all supervision spaces
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpacesResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpacesResponse> SupervisionSpacesGetAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all supervision spaces
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpacesResponse>> SupervisionSpacesGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove directory groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove directory groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add directory groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add directory groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDirectoryGroupsPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get supervision space by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get supervision space by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove participants from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsDeleteAsync(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove participants from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdParticipantsDeleteWithHttpInfoAsync(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add participants to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsPostAsync(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add participants to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdParticipantsPostWithHttpInfoAsync(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdPutAsync(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdPutWithHttpInfoAsync(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove user groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove user groups from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUserGroupsDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add user groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add user groups to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUserGroupsPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove users from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove users from supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUsersDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add users to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add users to supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUsersPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSupervisionSpacesResponse</returns>
        System.Threading.Tasks.Task<PostSupervisionSpacesResponse> SupervisionSpacesPostAsync(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new supervision space
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSupervisionSpacesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSupervisionSpacesResponse>> SupervisionSpacesPostWithHttpInfoAsync(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISupervisionSpacesApi : ISupervisionSpacesApiSync, ISupervisionSpacesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SupervisionSpacesApi : ISupervisionSpacesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisionSpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SupervisionSpacesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisionSpacesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SupervisionSpacesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisionSpacesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SupervisionSpacesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SupervisionSpacesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SupervisionSpacesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all supervision spaces **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpacesResponse</returns>
        public GetSupervisionSpacesResponse SupervisionSpacesGet(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpacesResponse> localVarResponse = SupervisionSpacesGetWithHttpInfo(pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all supervision spaces **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpacesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpacesResponse> SupervisionSpacesGetWithHttpInfo(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSupervisionSpacesResponse>("/supervision_spaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all supervision spaces **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpacesResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpacesResponse> SupervisionSpacesGetAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpacesResponse> localVarResponse = await SupervisionSpacesGetWithHttpInfoAsync(pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all supervision spaces **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpacesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpacesResponse>> SupervisionSpacesGetWithHttpInfoAsync(string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSupervisionSpacesResponse>("/supervision_spaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdDelete(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:delete&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove directory groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdDirectoryGroupsDelete(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove directory groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdDirectoryGroupsDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDirectoryGroupsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/directory_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDirectoryGroupsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove directory groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove directory groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDirectoryGroupsDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdDirectoryGroupsDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDirectoryGroupsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/directory_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDirectoryGroupsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add directory groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdDirectoryGroupsPost(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdDirectoryGroupsPostWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add directory groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdDirectoryGroupsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDirectoryGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/directory_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDirectoryGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add directory groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdDirectoryGroupsPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdDirectoryGroupsPostWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add directory groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdDirectoryGroupsPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdDirectoryGroupsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdDirectoryGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/directory_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdDirectoryGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supervision space by ID **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdGet(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supervision space by ID **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get supervision space by ID **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get supervision space by ID **REQUIRED PERMISSION:** &#x60;supervision_spaces:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove participants from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdParticipantsDelete(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdParticipantsDeleteWithHttpInfo(id, supervisionSpacesIdParticipantsDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove participants from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsDeleteWithHttpInfo(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'supervisionSpacesIdParticipantsDeleteRequest' is set
            if (supervisionSpacesIdParticipantsDeleteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'supervisionSpacesIdParticipantsDeleteRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdParticipantsDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supervisionSpacesIdParticipantsDeleteRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdParticipantsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdParticipantsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove participants from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsDeleteAsync(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdParticipantsDeleteWithHttpInfoAsync(id, supervisionSpacesIdParticipantsDeleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove participants from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsDeleteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdParticipantsDeleteWithHttpInfoAsync(int id, SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'supervisionSpacesIdParticipantsDeleteRequest' is set
            if (supervisionSpacesIdParticipantsDeleteRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'supervisionSpacesIdParticipantsDeleteRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdParticipantsDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supervisionSpacesIdParticipantsDeleteRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdParticipantsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdParticipantsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add participants to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdParticipantsPost(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdParticipantsPostWithHttpInfo(id, supervisionSpacesIdParticipantsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add participants to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsPostWithHttpInfo(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0)
        {
            // verify the required parameter 'supervisionSpacesIdParticipantsPostRequest' is set
            if (supervisionSpacesIdParticipantsPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'supervisionSpacesIdParticipantsPostRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdParticipantsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supervisionSpacesIdParticipantsPostRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdParticipantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/participants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdParticipantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add participants to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdParticipantsPostAsync(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdParticipantsPostWithHttpInfoAsync(id, supervisionSpacesIdParticipantsPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add participants to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This route can be used to add participants to supervision spaces. The &#x60;participants_text&#x60; is a semi-CSV style list of name, email, or phone number separated by newlines. &#x60;&#x60;&#x60; {   \&quot;participants_text\&quot;: \&quot;johnsmith@example.com\\nBob Jones, bob@example.com\\nJames K Anderson, james@example.com, 123-333-4567\\n\&quot; } &#x60;&#x60;&#x60; As shown in the example, the syntax is semi-CSV because any of the fields can be omitted. Internally the fields are parsed and used to search through known identities. If a match is found, the identity is added to the supervision space. If a match is not found, a new identity is created and added to the supervision space. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="supervisionSpacesIdParticipantsPostRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdParticipantsPostWithHttpInfoAsync(int id, SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'supervisionSpacesIdParticipantsPostRequest' is set
            if (supervisionSpacesIdParticipantsPostRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'supervisionSpacesIdParticipantsPostRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdParticipantsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = supervisionSpacesIdParticipantsPostRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdParticipantsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdParticipantsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdPut(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdPutWithHttpInfo(id, postPutSupervisionSpacesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdPutWithHttpInfo(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postPutSupervisionSpacesRequest' is set
            if (postPutSupervisionSpacesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postPutSupervisionSpacesRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postPutSupervisionSpacesRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdPutAsync(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdPutWithHttpInfoAsync(id, postPutSupervisionSpacesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the supervision space to update</param>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdPutWithHttpInfoAsync(int id, PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postPutSupervisionSpacesRequest' is set
            if (postPutSupervisionSpacesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postPutSupervisionSpacesRequest' when calling SupervisionSpacesApi->SupervisionSpacesIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postPutSupervisionSpacesRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove user groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdUserGroupsDelete(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdUserGroupsDeleteWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUserGroupsDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUserGroupsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/user_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUserGroupsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove user groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdUserGroupsDeleteWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user groups from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUserGroupsDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUserGroupsDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUserGroupsDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/user_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUserGroupsDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add user groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdUserGroupsPost(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdUserGroupsPostWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add user groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUserGroupsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUserGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/user_groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUserGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add user groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUserGroupsPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdUserGroupsPostWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add user groups to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUserGroupsPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUserGroupsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUserGroupsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/user_groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUserGroupsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove users from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdUsersDelete(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdUsersDeleteWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersDeleteWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUsersDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUsersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUsersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove users from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersDeleteAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdUsersDeleteWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove users from supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUsersDeleteWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUsersDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUsersDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUsersDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSupervisionSpaceByIdResponse</returns>
        public GetSupervisionSpaceByIdResponse SupervisionSpacesIdUsersPost(int id, List<int> requestBody, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = SupervisionSpacesIdUsersPostWithHttpInfo(id, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSupervisionSpaceByIdResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersPostWithHttpInfo(int id, List<int> requestBody, int operationIndex = 0)
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUsersPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add users to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSupervisionSpaceByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSupervisionSpaceByIdResponse> SupervisionSpacesIdUsersPostAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse> localVarResponse = await SupervisionSpacesIdUsersPostWithHttpInfoAsync(id, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add users to supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:update&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The supervision space ID</param>
        /// <param name="requestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSupervisionSpaceByIdResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSupervisionSpaceByIdResponse>> SupervisionSpacesIdUsersPostWithHttpInfoAsync(int id, List<int> requestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestBody' when calling SupervisionSpacesApi->SupervisionSpacesIdUsersPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesIdUsersPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetSupervisionSpaceByIdResponse>("/supervision_spaces/{id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesIdUsersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSupervisionSpacesResponse</returns>
        public PostSupervisionSpacesResponse SupervisionSpacesPost(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostSupervisionSpacesResponse> localVarResponse = SupervisionSpacesPostWithHttpInfo(postPutSupervisionSpacesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSupervisionSpacesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostSupervisionSpacesResponse> SupervisionSpacesPostWithHttpInfo(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postPutSupervisionSpacesRequest' is set
            if (postPutSupervisionSpacesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postPutSupervisionSpacesRequest' when calling SupervisionSpacesApi->SupervisionSpacesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postPutSupervisionSpacesRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSupervisionSpacesResponse>("/supervision_spaces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSupervisionSpacesResponse</returns>
        public async System.Threading.Tasks.Task<PostSupervisionSpacesResponse> SupervisionSpacesPostAsync(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSupervisionSpacesResponse> localVarResponse = await SupervisionSpacesPostWithHttpInfoAsync(postPutSupervisionSpacesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new supervision space **REQUIRED PERMISSION:** &#x60;supervision_spaces:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** One input field is &#x60;media_type_ids&#x60; for the supervision space to handle. The input for this field is an array of integers for the media types. Use the following table to lookup the IDs for each media type. | Type       | ID | |- -- -- -- -- -- -|- -- -| | Video      | 1  | | Audio      | 2  | | Chat       | 3  | | Attachment | 4  | | Email      | 5  | 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postPutSupervisionSpacesRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSupervisionSpacesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSupervisionSpacesResponse>> SupervisionSpacesPostWithHttpInfoAsync(PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postPutSupervisionSpacesRequest' is set
            if (postPutSupervisionSpacesRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postPutSupervisionSpacesRequest' when calling SupervisionSpacesApi->SupervisionSpacesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postPutSupervisionSpacesRequest;

            localVarRequestOptions.Operation = "SupervisionSpacesApi.SupervisionSpacesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSupervisionSpacesResponse>("/supervision_spaces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SupervisionSpacesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
