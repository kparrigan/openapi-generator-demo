/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all configuration change audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAuditLogResponse</returns>
        GetAuditLogResponse AuditLogsConfigChangeGet(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all configuration change audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAuditLogResponse</returns>
        ApiResponse<GetAuditLogResponse> AuditLogsConfigChangeGetWithHttpInfo(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAuditLogResponse</returns>
        GetAuditLogResponse AuditLogsGet(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAuditLogResponse</returns>
        ApiResponse<GetAuditLogResponse> AuditLogsGetWithHttpInfo(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all configuration change audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAuditLogResponse</returns>
        System.Threading.Tasks.Task<GetAuditLogResponse> AuditLogsConfigChangeGetAsync(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all configuration change audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAuditLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuditLogResponse>> AuditLogsConfigChangeGetWithHttpInfoAsync(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAuditLogResponse</returns>
        System.Threading.Tasks.Task<GetAuditLogResponse> AuditLogsGetAsync(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all audit logs
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAuditLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAuditLogResponse>> AuditLogsGetWithHttpInfoAsync(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditLogsApi : IAuditLogsApiSync, IAuditLogsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditLogsApi : IAuditLogsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditLogsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditLogsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuditLogsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all configuration change audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAuditLogResponse</returns>
        public GetAuditLogResponse AuditLogsConfigChangeGet(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> localVarResponse = AuditLogsConfigChangeGetWithHttpInfo(userId, fromDate, toDate, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all configuration change audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAuditLogResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> AuditLogsConfigChangeGetWithHttpInfo(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.AuditLogsConfigChangeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAuditLogResponse>("/audit_logs/config_change", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditLogsConfigChangeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all configuration change audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAuditLogResponse</returns>
        public async System.Threading.Tasks.Task<GetAuditLogResponse> AuditLogsConfigChangeGetAsync(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> localVarResponse = await AuditLogsConfigChangeGetWithHttpInfoAsync(userId, fromDate, toDate, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all configuration change audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for configuration changes related to the current user&#39;s org unit. This will contain the following auditable types: - Archive Bucket - Directory Group - Disclaimer Group - Entry Strategy - Integration - License - Microsoft Teams Disclaimer - Org Unit - Policy - Role - Storage Account - Supervision Space - Workflow  And the following auditable actions: - Create - Update - Delete - Disable - Enable 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAuditLogResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse>> AuditLogsConfigChangeGetWithHttpInfoAsync(int? userId = default(int?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.AuditLogsConfigChangeGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAuditLogResponse>("/audit_logs/config_change", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditLogsConfigChangeGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAuditLogResponse</returns>
        public GetAuditLogResponse AuditLogsGet(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> localVarResponse = AuditLogsGetWithHttpInfo(userId, auditableType, fromDate, toDate, auditableAction, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAuditLogResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> AuditLogsGetWithHttpInfo(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (auditableType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "auditable_type", auditableType));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (auditableAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "auditable_action", auditableAction));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.AuditLogsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAuditLogResponse>("/audit_logs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditLogsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAuditLogResponse</returns>
        public async System.Threading.Tasks.Task<GetAuditLogResponse> AuditLogsGetAsync(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse> localVarResponse = await AuditLogsGetWithHttpInfoAsync(userId, auditableType, fromDate, toDate, auditableAction, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all audit logs **REQUIRED PERMISSIONS:** &#x60;audit_log:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;  **NOTE:** Gets an (optionally filtered) list of audit logs for the current user&#39;s org unit 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">An user ID to filter by (optional)</param>
        /// <param name="auditableType">An auditable type to filter by (optional)</param>
        /// <param name="fromDate">Filter audit_logs with created_at date starting at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="toDate">Filter audit_logs with created_at date ending at this value, uses the [RFC3339 full-date format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (optional)</param>
        /// <param name="auditableAction">An auditable action to filter by (see response) (optional)</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAuditLogResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetAuditLogResponse>> AuditLogsGetWithHttpInfoAsync(int? userId = default(int?), AuditableType? auditableType = default(AuditableType?), DateOnly? fromDate = default(DateOnly?), DateOnly? toDate = default(DateOnly?), AuditableAction? auditableAction = default(AuditableAction?), string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            if (auditableType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "auditable_type", auditableType));
            }
            if (fromDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from_date", fromDate));
            }
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to_date", toDate));
            }
            if (auditableAction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "auditable_action", auditableAction));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "AuditLogsApi.AuditLogsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAuditLogResponse>("/audit_logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuditLogsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
