/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReconciliationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get record count by platform
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReconciliationCount</returns>
        GetReconciliationCount ReconciliationCountPost(CountRequest countRequest, int operationIndex = 0);

        /// <summary>
        /// Get record count by platform
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReconciliationCount</returns>
        ApiResponse<GetReconciliationCount> ReconciliationCountPostWithHttpInfo(CountRequest countRequest, int operationIndex = 0);
        /// <summary>
        /// Reconcile records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReconciliationResults</returns>
        GetReconciliationResults ReconciliationPost(QueryRequestArray queryRequestArray, int operationIndex = 0);

        /// <summary>
        /// Reconcile records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReconciliationResults</returns>
        ApiResponse<GetReconciliationResults> ReconciliationPostWithHttpInfo(QueryRequestArray queryRequestArray, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReconciliationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get record count by platform
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReconciliationCount</returns>
        System.Threading.Tasks.Task<GetReconciliationCount> ReconciliationCountPostAsync(CountRequest countRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get record count by platform
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReconciliationCount)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReconciliationCount>> ReconciliationCountPostWithHttpInfoAsync(CountRequest countRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reconcile records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReconciliationResults</returns>
        System.Threading.Tasks.Task<GetReconciliationResults> ReconciliationPostAsync(QueryRequestArray queryRequestArray, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reconcile records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReconciliationResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReconciliationResults>> ReconciliationPostWithHttpInfoAsync(QueryRequestArray queryRequestArray, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReconciliationApi : IReconciliationApiSync, IReconciliationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReconciliationApi : IReconciliationApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReconciliationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReconciliationApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReconciliationApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReconciliationApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get record count by platform **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReconciliationCount</returns>
        public GetReconciliationCount ReconciliationCountPost(CountRequest countRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetReconciliationCount> localVarResponse = ReconciliationCountPostWithHttpInfo(countRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get record count by platform **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReconciliationCount</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetReconciliationCount> ReconciliationCountPostWithHttpInfo(CountRequest countRequest, int operationIndex = 0)
        {
            // verify the required parameter 'countRequest' is set
            if (countRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'countRequest' when calling ReconciliationApi->ReconciliationCountPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = countRequest;

            localVarRequestOptions.Operation = "ReconciliationApi.ReconciliationCountPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetReconciliationCount>("/reconciliation/count", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconciliationCountPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get record count by platform **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReconciliationCount</returns>
        public async System.Threading.Tasks.Task<GetReconciliationCount> ReconciliationCountPostAsync(CountRequest countRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetReconciliationCount> localVarResponse = await ReconciliationCountPostWithHttpInfoAsync(countRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get record count by platform **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReconciliationCount)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetReconciliationCount>> ReconciliationCountPostWithHttpInfoAsync(CountRequest countRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countRequest' is set
            if (countRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'countRequest' when calling ReconciliationApi->ReconciliationCountPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = countRequest;

            localVarRequestOptions.Operation = "ReconciliationApi.ReconciliationCountPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetReconciliationCount>("/reconciliation/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconciliationCountPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconcile records **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReconciliationResults</returns>
        public GetReconciliationResults ReconciliationPost(QueryRequestArray queryRequestArray, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetReconciliationResults> localVarResponse = ReconciliationPostWithHttpInfo(queryRequestArray);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconcile records **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReconciliationResults</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetReconciliationResults> ReconciliationPostWithHttpInfo(QueryRequestArray queryRequestArray, int operationIndex = 0)
        {
            // verify the required parameter 'queryRequestArray' is set
            if (queryRequestArray == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queryRequestArray' when calling ReconciliationApi->ReconciliationPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = queryRequestArray;

            localVarRequestOptions.Operation = "ReconciliationApi.ReconciliationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetReconciliationResults>("/reconciliation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconciliationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reconcile records **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReconciliationResults</returns>
        public async System.Threading.Tasks.Task<GetReconciliationResults> ReconciliationPostAsync(QueryRequestArray queryRequestArray, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetReconciliationResults> localVarResponse = await ReconciliationPostWithHttpInfoAsync(queryRequestArray, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reconcile records **REQUIRED PERMISSION:** &#x60;reconciliation:read&#x60;   **RATE LIMIT:** &#x60;medium&#x60;   **NOTE:** The [documentation](/documentation/reconciliation) covers the supported platforms and attributes that can be queried. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="queryRequestArray"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReconciliationResults)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetReconciliationResults>> ReconciliationPostWithHttpInfoAsync(QueryRequestArray queryRequestArray, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'queryRequestArray' is set
            if (queryRequestArray == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'queryRequestArray' when calling ReconciliationApi->ReconciliationPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = queryRequestArray;

            localVarRequestOptions.Operation = "ReconciliationApi.ReconciliationPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetReconciliationResults>("/reconciliation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReconciliationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
