/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Search records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponse</returns>
        [Obsolete]
        PostSearchResponse SearchPost(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponse</returns>
        [Obsolete]
        ApiResponse<PostSearchResponse> SearchPostWithHttpInfo(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search records (beta)
        /// </summary>
        /// <remarks>
        /// **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponseNew</returns>
        PostSearchResponseNew SearchRecordsPost(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search records (beta)
        /// </summary>
        /// <remarks>
        /// **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponseNew</returns>
        ApiResponse<PostSearchResponseNew> SearchRecordsPostWithHttpInfo(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// List all saved searches
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSearchResponse</returns>
        GetSearchResponse SearchSavedGet(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// List all saved searches
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSearchResponse</returns>
        ApiResponse<GetSearchResponse> SearchSavedGetWithHttpInfo(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Run search by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponse</returns>
        PostSearchResponse SearchSavedIdGet(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);

        /// <summary>
        /// Run search by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponse</returns>
        ApiResponse<PostSearchResponse> SearchSavedIdGetWithHttpInfo(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0);
        /// <summary>
        /// Reset and reenter records to workflow
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostResetResponse</returns>
        PostResetResponse SearchSavedIdResetAndReenterPost(int id, PostResetRequest postResetRequest, int operationIndex = 0);

        /// <summary>
        /// Reset and reenter records to workflow
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostResetResponse</returns>
        ApiResponse<PostResetResponse> SearchSavedIdResetAndReenterPostWithHttpInfo(int id, PostResetRequest postResetRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Search records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<PostSearchResponse> SearchPostAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search records
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<PostSearchResponse>> SearchPostWithHttpInfoAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search records (beta)
        /// </summary>
        /// <remarks>
        /// **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponseNew</returns>
        System.Threading.Tasks.Task<PostSearchResponseNew> SearchRecordsPostAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search records (beta)
        /// </summary>
        /// <remarks>
        /// **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponseNew)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSearchResponseNew>> SearchRecordsPostWithHttpInfoAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all saved searches
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSearchResponse</returns>
        System.Threading.Tasks.Task<GetSearchResponse> SearchSavedGetAsync(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all saved searches
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSearchResponse>> SearchSavedGetWithHttpInfoAsync(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Run search by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponse</returns>
        System.Threading.Tasks.Task<PostSearchResponse> SearchSavedIdGetAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Run search by ID
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostSearchResponse>> SearchSavedIdGetWithHttpInfoAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Reset and reenter records to workflow
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostResetResponse</returns>
        System.Threading.Tasks.Task<PostResetResponse> SearchSavedIdResetAndReenterPostAsync(int id, PostResetRequest postResetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Reset and reenter records to workflow
        /// </summary>
        /// <remarks>
        /// **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostResetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostResetResponse>> SearchSavedIdResetAndReenterPostWithHttpInfoAsync(int id, PostResetRequest postResetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Search records **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponse</returns>
        [Obsolete]
        public PostSearchResponse SearchPost(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> localVarResponse = SearchPostWithHttpInfo(postSearchBody, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search records **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponse</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> SearchPostWithHttpInfo(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'postSearchBody' is set
            if (postSearchBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postSearchBody' when calling SearchApi->SearchPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.Data = postSearchBody;

            localVarRequestOptions.Operation = "SearchApi.SearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSearchResponse>("/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search records **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<PostSearchResponse> SearchPostAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> localVarResponse = await SearchPostWithHttpInfoAsync(postSearchBody, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search records **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **ALTERNATE ROUTE:** [Search records (beta)](/api-reference#post-/search/records)   **END OF SUPPORT:** 2025-04-01   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSearchResponse>> SearchPostWithHttpInfoAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postSearchBody' is set
            if (postSearchBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postSearchBody' when calling SearchApi->SearchPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.Data = postSearchBody;

            localVarRequestOptions.Operation = "SearchApi.SearchPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSearchResponse>("/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search records (beta) **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponseNew</returns>
        public PostSearchResponseNew SearchRecordsPost(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponseNew> localVarResponse = SearchRecordsPostWithHttpInfo(postSearchBody, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search records (beta) **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponseNew</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostSearchResponseNew> SearchRecordsPostWithHttpInfo(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'postSearchBody' is set
            if (postSearchBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postSearchBody' when calling SearchApi->SearchRecordsPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.Data = postSearchBody;

            localVarRequestOptions.Operation = "SearchApi.SearchRecordsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostSearchResponseNew>("/search/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecordsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search records (beta) **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponseNew</returns>
        public async System.Threading.Tasks.Task<PostSearchResponseNew> SearchRecordsPostAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponseNew> localVarResponse = await SearchRecordsPostWithHttpInfoAsync(postSearchBody, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search records (beta) **Disclaimer**: This endpoint is currently in beta and may be subject to ongoing   enhancements or minor adjustments. While we strive to avoid any breaking changes,   functionality and performance may improve or evolve over time based on customer   feedback and technical improvements. Please check the documentation regularly   for updates.   **REQUIRED PERMISSION:** &#x60;search:create&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This page supports pagination but does not support previous pages   For more detailed examples see [the search api guide](/documentation/search).   Limited to a max of 10,000 records 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postSearchBody"></param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponseNew)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSearchResponseNew>> SearchRecordsPostWithHttpInfoAsync(PostSearchBody postSearchBody, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postSearchBody' is set
            if (postSearchBody == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postSearchBody' when calling SearchApi->SearchRecordsPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.Data = postSearchBody;

            localVarRequestOptions.Operation = "SearchApi.SearchRecordsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostSearchResponseNew>("/search/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecordsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all saved searches **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSearchResponse</returns>
        public GetSearchResponse SearchSavedGet(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<GetSearchResponse> localVarResponse = SearchSavedGetWithHttpInfo(types, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all saved searches **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<GetSearchResponse> SearchSavedGetWithHttpInfo(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'types' is set
            if (types == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'types' when calling SearchApi->SearchSavedGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "types", types));

            localVarRequestOptions.Operation = "SearchApi.SearchSavedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSearchResponse>("/search/saved", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all saved searches **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSearchResponse</returns>
        public async System.Threading.Tasks.Task<GetSearchResponse> SearchSavedGetAsync(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<GetSearchResponse> localVarResponse = await SearchSavedGetWithHttpInfoAsync(types, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all saved searches **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="types">The type of search to retrieve</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<GetSearchResponse>> SearchSavedGetWithHttpInfoAsync(List<string> types, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'types' is set
            if (types == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'types' when calling SearchApi->SearchSavedGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "types", types));

            localVarRequestOptions.Operation = "SearchApi.SearchSavedGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSearchResponse>("/search/saved", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run search by ID **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostSearchResponse</returns>
        public PostSearchResponse SearchSavedIdGet(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> localVarResponse = SearchSavedIdGetWithHttpInfo(id, pageToken, max);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run search by ID **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostSearchResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> SearchSavedIdGetWithHttpInfo(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "SearchApi.SearchSavedIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PostSearchResponse>("/search/saved/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Run search by ID **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostSearchResponse</returns>
        public async System.Threading.Tasks.Task<PostSearchResponse> SearchSavedIdGetAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostSearchResponse> localVarResponse = await SearchSavedIdGetWithHttpInfoAsync(id, pageToken, max, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Run search by ID **REQUIRED PERMISSION:** &#x60;search:read&#x60;   **RATE LIMIT:** &#x60;heavy&#x60; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run</param>
        /// <param name="pageToken">The page token to query next, this comes from the &#x60;paging&#x60; in the response. This can be either &#x60;next_page_token&#x60; or &#x60;prev_page_token&#x60; (optional)</param>
        /// <param name="max">The max number of items in each page; default is 25, must not be more than 100 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostSearchResponse>> SearchSavedIdGetWithHttpInfoAsync(int id, string? pageToken = default(string?), int? max = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (max != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "max", max));
            }

            localVarRequestOptions.Operation = "SearchApi.SearchSavedIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostSearchResponse>("/search/saved/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset and reenter records to workflow **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostResetResponse</returns>
        public PostResetResponse SearchSavedIdResetAndReenterPost(int id, PostResetRequest postResetRequest, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PostResetResponse> localVarResponse = SearchSavedIdResetAndReenterPostWithHttpInfo(id, postResetRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset and reenter records to workflow **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostResetResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PostResetResponse> SearchSavedIdResetAndReenterPostWithHttpInfo(int id, PostResetRequest postResetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postResetRequest' is set
            if (postResetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postResetRequest' when calling SearchApi->SearchSavedIdResetAndReenterPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postResetRequest;

            localVarRequestOptions.Operation = "SearchApi.SearchSavedIdResetAndReenterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostResetResponse>("/search/saved/{id}/reset_and_reenter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedIdResetAndReenterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Reset and reenter records to workflow **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostResetResponse</returns>
        public async System.Threading.Tasks.Task<PostResetResponse> SearchSavedIdResetAndReenterPostAsync(int id, PostResetRequest postResetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PostResetResponse> localVarResponse = await SearchSavedIdResetAndReenterPostWithHttpInfoAsync(id, postResetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Reset and reenter records to workflow **REQUIRED PERMISSION:** &#x60;search:reset&#x60;   **RATE LIMIT:** &#x60;heavy&#x60;   **NOTE:** This endpoint creates a batch job to process the reset &amp; reenter request. Run the search again to see progress.   This endpoint supports resetting up to 20,000 records in a single request. If the number of records exceeds 20,000, change   the search criteria to reduce the number of records. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The ID of the search to run to find datums to reset</param>
        /// <param name="postResetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostResetResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PostResetResponse>> SearchSavedIdResetAndReenterPostWithHttpInfoAsync(int id, PostResetRequest postResetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postResetRequest' is set
            if (postResetRequest == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'postResetRequest' when calling SearchApi->SearchSavedIdResetAndReenterPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = postResetRequest;

            localVarRequestOptions.Operation = "SearchApi.SearchSavedIdResetAndReenterPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (ClientCredentials) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (BearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostResetResponse>("/search/saved/{id}/reset_and_reenter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchSavedIdResetAndReenterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
