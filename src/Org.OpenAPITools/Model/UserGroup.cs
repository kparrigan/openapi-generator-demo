/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// UserGroup
    /// </summary>
    [DataContract(Name = "UserGroup")]
    public partial class UserGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroup" /> class.
        /// </summary>
        /// <param name="categories">An array of categories.</param>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="description">The user group&#39;s description.</param>
        /// <param name="externalId">An eternal ID for the user group.</param>
        /// <param name="name">The user group&#39;s name.</param>
        /// <param name="updatedAt">The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="id">The user group&#39;s ID.</param>
        /// <param name="users">An array of the users in this group.</param>
        public UserGroup(List<CategoriesInner> categories = default(List<CategoriesInner>), DateTime createdAt = default(DateTime), string description = default(string), string externalId = default(string), string name = default(string), DateTime updatedAt = default(DateTime), int id = default(int), List<UsersInner> users = default(List<UsersInner>))
        {
            this.Categories = categories;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.ExternalId = externalId;
            this.Name = name;
            this.UpdatedAt = updatedAt;
            this.Id = id;
            this.Users = users;
        }

        /// <summary>
        /// An array of categories
        /// </summary>
        /// <value>An array of categories</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<CategoriesInner> Categories { get; set; }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The user group&#39;s description
        /// </summary>
        /// <value>The user group&#39;s description</value>
        /*
        <example>Accounting Department</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// An eternal ID for the user group
        /// </summary>
        /// <value>An eternal ID for the user group</value>
        /*
        <example>acct-123</example>
        */
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The user group&#39;s name
        /// </summary>
        /// <value>The user group&#39;s name</value>
        /*
        <example>Accounting</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The user group&#39;s ID
        /// </summary>
        /// <value>The user group&#39;s ID</value>
        /*
        <example>117</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// An array of the users in this group
        /// </summary>
        /// <value>An array of the users in this group</value>
        [DataMember(Name = "users", EmitDefaultValue = false)]
        public List<UsersInner> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroup {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
