/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostSearchBody
    /// </summary>
    [DataContract(Name = "PostSearchBody")]
    public partial class PostSearchBody : IValidatableObject
    {
        /// <summary>
        /// Defines Media
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaEnum
        {
            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 1,

            /// <summary>
            /// Enum Chat for value: chat
            /// </summary>
            [EnumMember(Value = "chat")]
            Chat = 2,

            /// <summary>
            /// Enum Document for value: document
            /// </summary>
            [EnumMember(Value = "document")]
            Document = 3,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 4,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 5,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 6
        }

        /// <summary>
        /// Defines Risk
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RiskEnum
        {
            /// <summary>
            /// Enum Low for value: low
            /// </summary>
            [EnumMember(Value = "low")]
            Low = 1,

            /// <summary>
            /// Enum Slight for value: slight
            /// </summary>
            [EnumMember(Value = "slight")]
            Slight = 2,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 3,

            /// <summary>
            /// Enum High for value: high
            /// </summary>
            [EnumMember(Value = "high")]
            High = 4,

            /// <summary>
            /// Enum NotAnalyzed for value: not_analyzed
            /// </summary>
            [EnumMember(Value = "not_analyzed")]
            NotAnalyzed = 5
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostSearchBody" /> class.
        /// </summary>
        /// <param name="contentSource">Each [content source](/documentation/search#content-source) is used with an OR operator. If 2 content_source&#39;s are given, records from both content_source&#39;s will be searched..</param>
        /// <param name="id">The record ID. If multiple record IDs are given, the search will use an OR operator.</param>
        /// <param name="media">The record [media type](/documentation/search#media). If multiple media types are given, the search will use an OR operator.</param>
        /// <param name="participants">participants.</param>
        /// <param name="identities">identities.</param>
        /// <param name="range">range.</param>
        /// <param name="risk">The analyzed risk of the record. If not_analyzed is passed, only not_analyzed records will be found. Other risks will be used as a OR operator.</param>
        /// <param name="sort">sort.</param>
        /// <param name="uuid">The record UUID. If multiple record UUIDs are given, the search will use an OR operator.</param>
        public PostSearchBody(List<string> contentSource = default(List<string>), List<int> id = default(List<int>), List<MediaEnum> media = default(List<MediaEnum>), PostSearchBodyParticipants participants = default(PostSearchBodyParticipants), Object identities = default(Object), PostSearchBodyRange range = default(PostSearchBodyRange), List<RiskEnum> risk = default(List<RiskEnum>), PostSearchBodySort sort = default(PostSearchBodySort), List<string> uuid = default(List<string>))
        {
            this.ContentSource = contentSource;
            this.Id = id;
            this.Media = media;
            this.Participants = participants;
            this.Identities = identities;
            this.Range = range;
            this.Risk = risk;
            this.Sort = sort;
            this.Uuid = uuid;
        }

        /// <summary>
        /// Each [content source](/documentation/search#content-source) is used with an OR operator. If 2 content_source&#39;s are given, records from both content_source&#39;s will be searched.
        /// </summary>
        /// <value>Each [content source](/documentation/search#content-source) is used with an OR operator. If 2 content_source&#39;s are given, records from both content_source&#39;s will be searched.</value>
        /*
        <example>[&quot;microsoft_teams&quot;,&quot;webex_meetings_ecomms&quot;]</example>
        */
        [DataMember(Name = "content_source", EmitDefaultValue = false)]
        public List<string> ContentSource { get; set; }

        /// <summary>
        /// The record ID. If multiple record IDs are given, the search will use an OR operator
        /// </summary>
        /// <value>The record ID. If multiple record IDs are given, the search will use an OR operator</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public List<int> Id { get; set; }

        /// <summary>
        /// The record [media type](/documentation/search#media). If multiple media types are given, the search will use an OR operator
        /// </summary>
        /// <value>The record [media type](/documentation/search#media). If multiple media types are given, the search will use an OR operator</value>
        [DataMember(Name = "media", EmitDefaultValue = false)]
        public List<PostSearchBody.MediaEnum> Media { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name = "participants", EmitDefaultValue = false)]
        public PostSearchBodyParticipants Participants { get; set; }

        /// <summary>
        /// Gets or Sets Identities
        /// </summary>
        [DataMember(Name = "identities", EmitDefaultValue = false)]
        public Object Identities { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name = "range", EmitDefaultValue = false)]
        public PostSearchBodyRange Range { get; set; }

        /// <summary>
        /// The analyzed risk of the record. If not_analyzed is passed, only not_analyzed records will be found. Other risks will be used as a OR operator
        /// </summary>
        /// <value>The analyzed risk of the record. If not_analyzed is passed, only not_analyzed records will be found. Other risks will be used as a OR operator</value>
        /*
        <example>[&quot;low&quot;,&quot;slight&quot;]</example>
        */
        [DataMember(Name = "risk", EmitDefaultValue = false)]
        public List<PostSearchBody.RiskEnum> Risk { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public PostSearchBodySort Sort { get; set; }

        /// <summary>
        /// The record UUID. If multiple record UUIDs are given, the search will use an OR operator
        /// </summary>
        /// <value>The record UUID. If multiple record UUIDs are given, the search will use an OR operator</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public List<string> Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostSearchBody {\n");
            sb.Append("  ContentSource: ").Append(ContentSource).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  Identities: ").Append(Identities).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Risk: ").Append(Risk).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
