/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetStorageAccountsResponseStorageAccountsInner
    /// </summary>
    [DataContract(Name = "GetStorageAccountsResponse_storage_accounts_inner")]
    public partial class GetStorageAccountsResponseStorageAccountsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetStorageAccountsResponseStorageAccountsInner" /> class.
        /// </summary>
        /// <param name="retentionLibraries">The number of retention libraries associated with the storage account.</param>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="globalStorage">Indicates if the storage account is global.</param>
        /// <param name="id">The storage account ID.</param>
        /// <param name="name">The storage account name.</param>
        /// <param name="region">Storage account region.</param>
        /// <param name="regionPretty">A pretty formatted version of the region field.</param>
        /// <param name="status">The current status of the storage account.</param>
        /// <param name="updatedAt">The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        public GetStorageAccountsResponseStorageAccountsInner(int retentionLibraries = default(int), DateTime createdAt = default(DateTime), bool globalStorage = default(bool), int id = default(int), string name = default(string), string region = default(string), string regionPretty = default(string), string status = default(string), DateTime updatedAt = default(DateTime))
        {
            this.RetentionLibraries = retentionLibraries;
            this.CreatedAt = createdAt;
            this.GlobalStorage = globalStorage;
            this.Id = id;
            this.Name = name;
            this.Region = region;
            this.RegionPretty = regionPretty;
            this.Status = status;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The number of retention libraries associated with the storage account
        /// </summary>
        /// <value>The number of retention libraries associated with the storage account</value>
        /*
        <example>7</example>
        */
        [DataMember(Name = "retention_libraries", EmitDefaultValue = false)]
        public int RetentionLibraries { get; set; }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Indicates if the storage account is global
        /// </summary>
        /// <value>Indicates if the storage account is global</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "global_storage", EmitDefaultValue = true)]
        public bool GlobalStorage { get; set; }

        /// <summary>
        /// The storage account ID
        /// </summary>
        /// <value>The storage account ID</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The storage account name
        /// </summary>
        /// <value>The storage account name</value>
        /*
        <example>Default</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Storage account region
        /// </summary>
        /// <value>Storage account region</value>
        /*
        <example>us-east-2</example>
        */
        [DataMember(Name = "region", EmitDefaultValue = true)]
        public string Region { get; set; }

        /// <summary>
        /// A pretty formatted version of the region field
        /// </summary>
        /// <value>A pretty formatted version of the region field</value>
        /*
        <example>US East (Ohio)</example>
        */
        [DataMember(Name = "region_pretty", EmitDefaultValue = true)]
        public string RegionPretty { get; set; }

        /// <summary>
        /// The current status of the storage account
        /// </summary>
        /// <value>The current status of the storage account</value>
        /*
        <example>active</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetStorageAccountsResponseStorageAccountsInner {\n");
            sb.Append("  RetentionLibraries: ").Append(RetentionLibraries).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GlobalStorage: ").Append(GlobalStorage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  RegionPretty: ").Append(RegionPretty).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
