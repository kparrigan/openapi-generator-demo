/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueryRequest
    /// </summary>
    [DataContract(Name = "QueryRequest")]
    public partial class QueryRequest : IValidatableObject
    {
        /// <summary>
        /// Filter the records by the media_type
        /// </summary>
        /// <value>Filter the records by the media_type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MediaTypeEnum
        {
            /// <summary>
            /// Enum Audio for value: audio
            /// </summary>
            [EnumMember(Value = "audio")]
            Audio = 1,

            /// <summary>
            /// Enum Chat for value: chat
            /// </summary>
            [EnumMember(Value = "chat")]
            Chat = 2,

            /// <summary>
            /// Enum Document for value: document
            /// </summary>
            [EnumMember(Value = "document")]
            Document = 3,

            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 4,

            /// <summary>
            /// Enum Other for value: other
            /// </summary>
            [EnumMember(Value = "other")]
            Other = 5,

            /// <summary>
            /// Enum Video for value: video
            /// </summary>
            [EnumMember(Value = "video")]
            Video = 6
        }


        /// <summary>
        /// Filter the records by the media_type
        /// </summary>
        /// <value>Filter the records by the media_type</value>
        /*
        <example>chat</example>
        */
        [DataMember(Name = "media_type", EmitDefaultValue = true)]
        public MediaTypeEnum? MediaType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryRequest" /> class.
        /// </summary>
        /// <param name="platform">Third party platform to search. Supported platforms are documented [here](/documentation/reconciliation).</param>
        /// <param name="attributes">A list of attributes for the platform to query on.</param>
        /// <param name="includesTimestamp">Records that contain the provided timestamp in the list of records in the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). **This applies to select attributes,  for more information see** [this documentation](/documentation/reconciliation#includes_timestamp). .</param>
        /// <param name="mediaType">Filter the records by the media_type.</param>
        public QueryRequest(string platform = default(string), List<QueryRequestAttributesInner> attributes = default(List<QueryRequestAttributesInner>), DateTime? includesTimestamp = default(DateTime?), MediaTypeEnum? mediaType = default(MediaTypeEnum?))
        {
            this.Platform = platform;
            this.Attributes = attributes;
            this.IncludesTimestamp = includesTimestamp;
            this.MediaType = mediaType;
        }

        /// <summary>
        /// Third party platform to search. Supported platforms are documented [here](/documentation/reconciliation)
        /// </summary>
        /// <value>Third party platform to search. Supported platforms are documented [here](/documentation/reconciliation)</value>
        /*
        <example>microsoft_teams</example>
        */
        [DataMember(Name = "platform", EmitDefaultValue = false)]
        public string Platform { get; set; }

        /// <summary>
        /// A list of attributes for the platform to query on
        /// </summary>
        /// <value>A list of attributes for the platform to query on</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<QueryRequestAttributesInner> Attributes { get; set; }

        /// <summary>
        /// Records that contain the provided timestamp in the list of records in the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). **This applies to select attributes,  for more information see** [this documentation](/documentation/reconciliation#includes_timestamp). 
        /// </summary>
        /// <value>Records that contain the provided timestamp in the list of records in the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). **This applies to select attributes,  for more information see** [this documentation](/documentation/reconciliation#includes_timestamp). </value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "includes_timestamp", EmitDefaultValue = true)]
        public DateTime? IncludesTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryRequest {\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  IncludesTimestamp: ").Append(IncludesTimestamp).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
