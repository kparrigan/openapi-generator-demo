/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostChatConversationBodyChatMessagesInner
    /// </summary>
    [DataContract(Name = "PostChatConversationBody_chat_messages_inner")]
    public partial class PostChatConversationBodyChatMessagesInner : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "content_type", IsRequired = true, EmitDefaultValue = true)]
        public MessageContentType ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChatMessagesInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostChatConversationBodyChatMessagesInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChatMessagesInner" /> class.
        /// </summary>
        /// <param name="id">The message ID from the chat platform (required).</param>
        /// <param name="participantId">The ID of the participant that sent this message. This ID must correspond to an ID in the &#x60;meta.participants.activemember&#x60; array. (required).</param>
        /// <param name="text">The message&#39;s text (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="timestamp">The message&#39;s timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="deletedTimestamp">The message&#39;s deleted timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="editedMessageId">The id of the message being edited.</param>
        /// <param name="reactionToMessageId">The id of the message being reacted to.</param>
        /// <param name="replyToMessageId">The id of the message being replied to.</param>
        /// <param name="attachmentIds">The IDs of the attachments attached to this specific message.</param>
        /// <param name="importance">importance.</param>
        public PostChatConversationBodyChatMessagesInner(string id = default(string), string participantId = default(string), string text = default(string), MessageContentType contentType = default(MessageContentType), DateTime timestamp = default(DateTime), DateTime deletedTimestamp = default(DateTime), string editedMessageId = default(string), string reactionToMessageId = default(string), string replyToMessageId = default(string), List<string> attachmentIds = default(List<string>), PostChatConversationBodyChatMessagesInnerImportance importance = default(PostChatConversationBodyChatMessagesInnerImportance))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PostChatConversationBodyChatMessagesInner and cannot be null");
            }
            this.Id = id;
            // to ensure "participantId" is required (not null)
            if (participantId == null)
            {
                throw new ArgumentNullException("participantId is a required property for PostChatConversationBodyChatMessagesInner and cannot be null");
            }
            this.ParticipantId = participantId;
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for PostChatConversationBodyChatMessagesInner and cannot be null");
            }
            this.Text = text;
            this.ContentType = contentType;
            this.Timestamp = timestamp;
            this.DeletedTimestamp = deletedTimestamp;
            this.EditedMessageId = editedMessageId;
            this.ReactionToMessageId = reactionToMessageId;
            this.ReplyToMessageId = replyToMessageId;
            this.AttachmentIds = attachmentIds;
            this.Importance = importance;
        }

        /// <summary>
        /// The message ID from the chat platform
        /// </summary>
        /// <value>The message ID from the chat platform</value>
        /*
        <example>7302e64f-2712-4e57-9dec-ada177b2d33b</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the participant that sent this message. This ID must correspond to an ID in the &#x60;meta.participants.activemember&#x60; array.
        /// </summary>
        /// <value>The ID of the participant that sent this message. This ID must correspond to an ID in the &#x60;meta.participants.activemember&#x60; array.</value>
        /*
        <example>user1234</example>
        */
        [DataMember(Name = "participant_id", IsRequired = true, EmitDefaultValue = true)]
        public string ParticipantId { get; set; }

        /// <summary>
        /// The message&#39;s text
        /// </summary>
        /// <value>The message&#39;s text</value>
        /*
        <example>Do you want go to lunch?</example>
        */
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// The message&#39;s timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The message&#39;s timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-06-07T13:08:43Z</example>
        */
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The message&#39;s deleted timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The message&#39;s deleted timestamp in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-06-08T13:08:43Z</example>
        */
        [DataMember(Name = "deleted_timestamp", EmitDefaultValue = false)]
        public DateTime DeletedTimestamp { get; set; }

        /// <summary>
        /// The id of the message being edited
        /// </summary>
        /// <value>The id of the message being edited</value>
        /*
        <example>12345921</example>
        */
        [DataMember(Name = "edited_message_id", EmitDefaultValue = false)]
        public string EditedMessageId { get; set; }

        /// <summary>
        /// The id of the message being reacted to
        /// </summary>
        /// <value>The id of the message being reacted to</value>
        /*
        <example>12345921</example>
        */
        [DataMember(Name = "reaction_to_message_id", EmitDefaultValue = false)]
        public string ReactionToMessageId { get; set; }

        /// <summary>
        /// The id of the message being replied to
        /// </summary>
        /// <value>The id of the message being replied to</value>
        /*
        <example>12345921</example>
        */
        [DataMember(Name = "reply_to_message_id", EmitDefaultValue = false)]
        public string ReplyToMessageId { get; set; }

        /// <summary>
        /// The IDs of the attachments attached to this specific message
        /// </summary>
        /// <value>The IDs of the attachments attached to this specific message</value>
        /*
        <example>[&quot;example-attachment-id&quot;]</example>
        */
        [DataMember(Name = "attachment_ids", EmitDefaultValue = false)]
        public List<string> AttachmentIds { get; set; }

        /// <summary>
        /// Gets or Sets Importance
        /// </summary>
        [DataMember(Name = "importance", EmitDefaultValue = false)]
        public PostChatConversationBodyChatMessagesInnerImportance Importance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostChatConversationBodyChatMessagesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  DeletedTimestamp: ").Append(DeletedTimestamp).Append("\n");
            sb.Append("  EditedMessageId: ").Append(EditedMessageId).Append("\n");
            sb.Append("  ReactionToMessageId: ").Append(ReactionToMessageId).Append("\n");
            sb.Append("  ReplyToMessageId: ").Append(ReplyToMessageId).Append("\n");
            sb.Append("  AttachmentIds: ").Append(AttachmentIds).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
