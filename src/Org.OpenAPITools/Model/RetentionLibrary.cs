/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RetentionLibrary
    /// </summary>
    [DataContract(Name = "RetentionLibrary")]
    public partial class RetentionLibrary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionLibrary" /> class.
        /// </summary>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="datumCount">The number of datums stored in the retention library.</param>
        /// <param name="datumSize">The total size of all the datums in the retention library.</param>
        /// <param name="description">A description of the bucket.</param>
        /// <param name="displayName">The retention library display name including the region.</param>
        /// <param name="id">Retention library ID.</param>
        /// <param name="legalHoldCount">The number of datums in legal hold in this retention library.</param>
        /// <param name="name">The name of the bucket.</param>
        /// <param name="retentionPeriodDays">Retention period in days.</param>
        /// <param name="retentionPeriodEnabled">Indicates if a retention period policy is currently enabled.</param>
        /// <param name="retentionSummaryText">Summary description of the retention policy.</param>
        /// <param name="secCompliantStorageConfirmed">Indicates if the SEC Rule 17a-4 compliance has been confirmed.</param>
        /// <param name="secCompliantStorageEnabled">Indicates if the storage has SEC Rule 17a-4 compliance enabled.</param>
        /// <param name="storageAccountId">Storage account ID.</param>
        /// <param name="swrvRuleCount">Smart workflow review (SWRV) rules currently applied to this retention library.</param>
        /// <param name="updatedAt">The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        public RetentionLibrary(DateTime createdAt = default(DateTime), int datumCount = default(int), int datumSize = default(int), string description = default(string), string displayName = default(string), int id = default(int), int legalHoldCount = default(int), string name = default(string), int retentionPeriodDays = default(int), bool retentionPeriodEnabled = default(bool), string retentionSummaryText = default(string), bool secCompliantStorageConfirmed = default(bool), bool secCompliantStorageEnabled = default(bool), int storageAccountId = default(int), int swrvRuleCount = default(int), DateTime updatedAt = default(DateTime))
        {
            this.CreatedAt = createdAt;
            this.DatumCount = datumCount;
            this.DatumSize = datumSize;
            this.Description = description;
            this.DisplayName = displayName;
            this.Id = id;
            this.LegalHoldCount = legalHoldCount;
            this.Name = name;
            this.RetentionPeriodDays = retentionPeriodDays;
            this.RetentionPeriodEnabled = retentionPeriodEnabled;
            this.RetentionSummaryText = retentionSummaryText;
            this.SecCompliantStorageConfirmed = secCompliantStorageConfirmed;
            this.SecCompliantStorageEnabled = secCompliantStorageEnabled;
            this.StorageAccountId = storageAccountId;
            this.SwrvRuleCount = swrvRuleCount;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The number of datums stored in the retention library
        /// </summary>
        /// <value>The number of datums stored in the retention library</value>
        /*
        <example>72</example>
        */
        [DataMember(Name = "datum_count", EmitDefaultValue = false)]
        public int DatumCount { get; set; }

        /// <summary>
        /// The total size of all the datums in the retention library
        /// </summary>
        /// <value>The total size of all the datums in the retention library</value>
        /*
        <example>4532</example>
        */
        [DataMember(Name = "datum_size", EmitDefaultValue = false)]
        public int DatumSize { get; set; }

        /// <summary>
        /// A description of the bucket
        /// </summary>
        /// <value>A description of the bucket</value>
        /*
        <example>Used to store data for the testing environment</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The retention library display name including the region
        /// </summary>
        /// <value>The retention library display name including the region</value>
        /*
        <example>Test Bucket - US West (Oregon)</example>
        */
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Retention library ID
        /// </summary>
        /// <value>Retention library ID</value>
        /*
        <example>477</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The number of datums in legal hold in this retention library
        /// </summary>
        /// <value>The number of datums in legal hold in this retention library</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "legal_hold_count", EmitDefaultValue = false)]
        public int LegalHoldCount { get; set; }

        /// <summary>
        /// The name of the bucket
        /// </summary>
        /// <value>The name of the bucket</value>
        /*
        <example>Test Bucket</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Retention period in days
        /// </summary>
        /// <value>Retention period in days</value>
        /*
        <example>90</example>
        */
        [DataMember(Name = "retention_period_days", EmitDefaultValue = false)]
        public int RetentionPeriodDays { get; set; }

        /// <summary>
        /// Indicates if a retention period policy is currently enabled
        /// </summary>
        /// <value>Indicates if a retention period policy is currently enabled</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "retention_period_enabled", EmitDefaultValue = true)]
        public bool RetentionPeriodEnabled { get; set; }

        /// <summary>
        /// Summary description of the retention policy
        /// </summary>
        /// <value>Summary description of the retention policy</value>
        /*
        <example>Keep for 90 days</example>
        */
        [DataMember(Name = "retention_summary_text", EmitDefaultValue = false)]
        public string RetentionSummaryText { get; set; }

        /// <summary>
        /// Indicates if the SEC Rule 17a-4 compliance has been confirmed
        /// </summary>
        /// <value>Indicates if the SEC Rule 17a-4 compliance has been confirmed</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "sec_compliant_storage_confirmed", EmitDefaultValue = true)]
        public bool SecCompliantStorageConfirmed { get; set; }

        /// <summary>
        /// Indicates if the storage has SEC Rule 17a-4 compliance enabled
        /// </summary>
        /// <value>Indicates if the storage has SEC Rule 17a-4 compliance enabled</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "sec_compliant_storage_enabled", EmitDefaultValue = true)]
        public bool SecCompliantStorageEnabled { get; set; }

        /// <summary>
        /// Storage account ID
        /// </summary>
        /// <value>Storage account ID</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "storage_account_id", EmitDefaultValue = false)]
        public int StorageAccountId { get; set; }

        /// <summary>
        /// Smart workflow review (SWRV) rules currently applied to this retention library
        /// </summary>
        /// <value>Smart workflow review (SWRV) rules currently applied to this retention library</value>
        /*
        <example>27</example>
        */
        [DataMember(Name = "swrv_rule_count", EmitDefaultValue = false)]
        public int SwrvRuleCount { get; set; }

        /// <summary>
        /// The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetentionLibrary {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DatumCount: ").Append(DatumCount).Append("\n");
            sb.Append("  DatumSize: ").Append(DatumSize).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LegalHoldCount: ").Append(LegalHoldCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RetentionPeriodDays: ").Append(RetentionPeriodDays).Append("\n");
            sb.Append("  RetentionPeriodEnabled: ").Append(RetentionPeriodEnabled).Append("\n");
            sb.Append("  RetentionSummaryText: ").Append(RetentionSummaryText).Append("\n");
            sb.Append("  SecCompliantStorageConfirmed: ").Append(SecCompliantStorageConfirmed).Append("\n");
            sb.Append("  SecCompliantStorageEnabled: ").Append(SecCompliantStorageEnabled).Append("\n");
            sb.Append("  StorageAccountId: ").Append(StorageAccountId).Append("\n");
            sb.Append("  SwrvRuleCount: ").Append(SwrvRuleCount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
