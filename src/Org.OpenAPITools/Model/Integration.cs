/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Integration
    /// </summary>
    [DataContract(Name = "Integration")]
    public partial class Integration : IValidatableObject
    {
        /// <summary>
        /// The state of the last integration run
        /// </summary>
        /// <value>The state of the last integration run</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ServiceStatusEnum
        {
            /// <summary>
            /// Enum OK for value: OK
            /// </summary>
            [EnumMember(Value = "OK")]
            OK = 1,

            /// <summary>
            /// Enum SKIPPED for value: SKIPPED
            /// </summary>
            [EnumMember(Value = "SKIPPED")]
            SKIPPED = 2,

            /// <summary>
            /// Enum BADAUTH for value: BADAUTH
            /// </summary>
            [EnumMember(Value = "BADAUTH")]
            BADAUTH = 3,

            /// <summary>
            /// Enum PAUSED for value: PAUSED
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED = 4
        }


        /// <summary>
        /// The state of the last integration run
        /// </summary>
        /// <value>The state of the last integration run</value>
        /*
        <example>SKIPPED</example>
        */
        [DataMember(Name = "service_status", EmitDefaultValue = false)]
        public ServiceStatusEnum? ServiceStatus { get; set; }
        /// <summary>
        /// The integration&#39;s current status
        /// </summary>
        /// <value>The integration&#39;s current status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: Active
            /// </summary>
            [EnumMember(Value = "Active")]
            Active = 1,

            /// <summary>
            /// Enum Paused for value: Paused
            /// </summary>
            [EnumMember(Value = "Paused")]
            Paused = 2,

            /// <summary>
            /// Enum InvalidCredentials for value: Invalid Credentials
            /// </summary>
            [EnumMember(Value = "Invalid Credentials")]
            InvalidCredentials = 3
        }


        /// <summary>
        /// The integration&#39;s current status
        /// </summary>
        /// <value>The integration&#39;s current status</value>
        /*
        <example>Paused</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Integration" /> class.
        /// </summary>
        /// <param name="accessTokenExpirationDate">If a token is used for authentication, and has a expiration date, it will be reflected here using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="accountUserEmail">The account email that is associated with the API.</param>
        /// <param name="accountUserId">The account ID that is associated with the API.</param>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="description">The description entered when adding the integration.</param>
        /// <param name="hasIntegrationPolicy">Indicates if the datum produced by this integration are being analyzed by a detection policy.</param>
        /// <param name="id">The integration ID.</param>
        /// <param name="integrationGroup">The type of integration.</param>
        /// <param name="integrationPolicyId">The ID of the policy for this integration.</param>
        /// <param name="integrationType">Name of the service integrated with.</param>
        /// <param name="integrationTypeId">Theta Lake&#39;s internal integration ID.</param>
        /// <param name="lastUploadAt">The last date the integration uploaded content using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="name">Name of the integration when it was created.</param>
        /// <param name="notBeforeDate">Indicates the date that no data can be consumed before using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="notifySubmitter">Indicates if the submitter assigned to review data will be notified when new data is uploaded.</param>
        /// <param name="scopesChanged">Indicates if the scopes have been changed.</param>
        /// <param name="serviceLastRunAt">The timestamp of the last integration run using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). This is not the last time data was uploaded.</param>
        /// <param name="servicePaused">Indicates if the integration has been paused.</param>
        /// <param name="serviceStatus">The state of the last integration run.</param>
        /// <param name="status">The integration&#39;s current status.</param>
        /// <param name="statusColor">RGB hex color value representing the current status.</param>
        /// <param name="updatedAt">The last time the integration was updated in the Theta Lake portal UI.</param>
        /// <param name="uploadsLast30Days">How many datums have been uploaded in the last 30 days.</param>
        /// <param name="user">user.</param>
        public Integration(DateTime? accessTokenExpirationDate = default(DateTime?), string accountUserEmail = default(string), string accountUserId = default(string), DateTime createdAt = default(DateTime), string description = default(string), bool hasIntegrationPolicy = default(bool), string id = default(string), string integrationGroup = default(string), string integrationPolicyId = default(string), string integrationType = default(string), string integrationTypeId = default(string), DateTime? lastUploadAt = default(DateTime?), string name = default(string), DateTime? notBeforeDate = default(DateTime?), bool notifySubmitter = default(bool), bool scopesChanged = default(bool), DateTime? serviceLastRunAt = default(DateTime?), string servicePaused = default(string), ServiceStatusEnum? serviceStatus = default(ServiceStatusEnum?), StatusEnum? status = default(StatusEnum?), string statusColor = default(string), DateTime? updatedAt = default(DateTime?), string uploadsLast30Days = default(string), IntegrationUser user = default(IntegrationUser))
        {
            this.AccessTokenExpirationDate = accessTokenExpirationDate;
            this.AccountUserEmail = accountUserEmail;
            this.AccountUserId = accountUserId;
            this.CreatedAt = createdAt;
            this.Description = description;
            this.HasIntegrationPolicy = hasIntegrationPolicy;
            this.Id = id;
            this.IntegrationGroup = integrationGroup;
            this.IntegrationPolicyId = integrationPolicyId;
            this.IntegrationType = integrationType;
            this.IntegrationTypeId = integrationTypeId;
            this.LastUploadAt = lastUploadAt;
            this.Name = name;
            this.NotBeforeDate = notBeforeDate;
            this.NotifySubmitter = notifySubmitter;
            this.ScopesChanged = scopesChanged;
            this.ServiceLastRunAt = serviceLastRunAt;
            this.ServicePaused = servicePaused;
            this.ServiceStatus = serviceStatus;
            this.Status = status;
            this.StatusColor = statusColor;
            this.UpdatedAt = updatedAt;
            this.UploadsLast30Days = uploadsLast30Days;
            this.User = user;
        }

        /// <summary>
        /// If a token is used for authentication, and has a expiration date, it will be reflected here using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>If a token is used for authentication, and has a expiration date, it will be reflected here using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-01-15T06:50:44Z</example>
        */
        [DataMember(Name = "access_token_expiration_date", EmitDefaultValue = true)]
        public DateTime? AccessTokenExpirationDate { get; set; }

        /// <summary>
        /// The account email that is associated with the API
        /// </summary>
        /// <value>The account email that is associated with the API</value>
        /*
        <example>john@smith.com</example>
        */
        [DataMember(Name = "account_user_email", EmitDefaultValue = true)]
        public string AccountUserEmail { get; set; }

        /// <summary>
        /// The account ID that is associated with the API
        /// </summary>
        /// <value>The account ID that is associated with the API</value>
        /*
        <example>35OVrJQu</example>
        */
        [DataMember(Name = "account_user_id", EmitDefaultValue = true)]
        public string AccountUserId { get; set; }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The description entered when adding the integration
        /// </summary>
        /// <value>The description entered when adding the integration</value>
        /*
        <example>Integration to Zoom corporate account</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates if the datum produced by this integration are being analyzed by a detection policy
        /// </summary>
        /// <value>Indicates if the datum produced by this integration are being analyzed by a detection policy</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "has_integration_policy", EmitDefaultValue = true)]
        public bool HasIntegrationPolicy { get; set; }

        /// <summary>
        /// The integration ID
        /// </summary>
        /// <value>The integration ID</value>
        /*
        <example>302</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The type of integration
        /// </summary>
        /// <value>The type of integration</value>
        /*
        <example>Collaboration Platform</example>
        */
        [DataMember(Name = "integration_group", EmitDefaultValue = false)]
        public string IntegrationGroup { get; set; }

        /// <summary>
        /// The ID of the policy for this integration
        /// </summary>
        /// <value>The ID of the policy for this integration</value>
        /*
        <example>165</example>
        */
        [DataMember(Name = "integration_policy_id", EmitDefaultValue = false)]
        public string IntegrationPolicyId { get; set; }

        /// <summary>
        /// Name of the service integrated with
        /// </summary>
        /// <value>Name of the service integrated with</value>
        /*
        <example>Zoom</example>
        */
        [DataMember(Name = "integration_type", EmitDefaultValue = false)]
        public string IntegrationType { get; set; }

        /// <summary>
        /// Theta Lake&#39;s internal integration ID
        /// </summary>
        /// <value>Theta Lake&#39;s internal integration ID</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "integration_type_id", EmitDefaultValue = false)]
        public string IntegrationTypeId { get; set; }

        /// <summary>
        /// The last date the integration uploaded content using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The last date the integration uploaded content using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-03-21T17:14:55Z</example>
        */
        [DataMember(Name = "last_upload_at", EmitDefaultValue = true)]
        public DateTime? LastUploadAt { get; set; }

        /// <summary>
        /// Name of the integration when it was created
        /// </summary>
        /// <value>Name of the integration when it was created</value>
        /*
        <example>David&#39;s Zoom Integration</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates the date that no data can be consumed before using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>Indicates the date that no data can be consumed before using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-01-10T00:00Z</example>
        */
        [DataMember(Name = "not_before_date", EmitDefaultValue = true)]
        public DateTime? NotBeforeDate { get; set; }

        /// <summary>
        /// Indicates if the submitter assigned to review data will be notified when new data is uploaded
        /// </summary>
        /// <value>Indicates if the submitter assigned to review data will be notified when new data is uploaded</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "notify_submitter", EmitDefaultValue = true)]
        public bool NotifySubmitter { get; set; }

        /// <summary>
        /// Indicates if the scopes have been changed
        /// </summary>
        /// <value>Indicates if the scopes have been changed</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "scopes_changed", EmitDefaultValue = true)]
        public bool ScopesChanged { get; set; }

        /// <summary>
        /// The timestamp of the last integration run using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). This is not the last time data was uploaded
        /// </summary>
        /// <value>The timestamp of the last integration run using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). This is not the last time data was uploaded</value>
        /*
        <example>2023-01-15T05:50:45Z</example>
        */
        [DataMember(Name = "service_last_run_at", EmitDefaultValue = true)]
        public DateTime? ServiceLastRunAt { get; set; }

        /// <summary>
        /// Indicates if the integration has been paused
        /// </summary>
        /// <value>Indicates if the integration has been paused</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "service_paused", EmitDefaultValue = false)]
        public string ServicePaused { get; set; }

        /// <summary>
        /// RGB hex color value representing the current status
        /// </summary>
        /// <value>RGB hex color value representing the current status</value>
        /*
        <example>#FFC906</example>
        */
        [DataMember(Name = "status_color", EmitDefaultValue = false)]
        public string StatusColor { get; set; }

        /// <summary>
        /// The last time the integration was updated in the Theta Lake portal UI
        /// </summary>
        /// <value>The last time the integration was updated in the Theta Lake portal UI</value>
        /*
        <example>2022-06-01T17:39:12Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// How many datums have been uploaded in the last 30 days
        /// </summary>
        /// <value>How many datums have been uploaded in the last 30 days</value>
        /*
        <example>32</example>
        */
        [DataMember(Name = "uploads_last_30_days", EmitDefaultValue = true)]
        public string UploadsLast30Days { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public IntegrationUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Integration {\n");
            sb.Append("  AccessTokenExpirationDate: ").Append(AccessTokenExpirationDate).Append("\n");
            sb.Append("  AccountUserEmail: ").Append(AccountUserEmail).Append("\n");
            sb.Append("  AccountUserId: ").Append(AccountUserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasIntegrationPolicy: ").Append(HasIntegrationPolicy).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IntegrationGroup: ").Append(IntegrationGroup).Append("\n");
            sb.Append("  IntegrationPolicyId: ").Append(IntegrationPolicyId).Append("\n");
            sb.Append("  IntegrationType: ").Append(IntegrationType).Append("\n");
            sb.Append("  IntegrationTypeId: ").Append(IntegrationTypeId).Append("\n");
            sb.Append("  LastUploadAt: ").Append(LastUploadAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotBeforeDate: ").Append(NotBeforeDate).Append("\n");
            sb.Append("  NotifySubmitter: ").Append(NotifySubmitter).Append("\n");
            sb.Append("  ScopesChanged: ").Append(ScopesChanged).Append("\n");
            sb.Append("  ServiceLastRunAt: ").Append(ServiceLastRunAt).Append("\n");
            sb.Append("  ServicePaused: ").Append(ServicePaused).Append("\n");
            sb.Append("  ServiceStatus: ").Append(ServiceStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusColor: ").Append(StatusColor).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UploadsLast30Days: ").Append(UploadsLast30Days).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
