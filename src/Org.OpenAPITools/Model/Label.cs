/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Label
    /// </summary>
    [DataContract(Name = "Label")]
    public partial class Label : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Label" /> class.
        /// </summary>
        /// <param name="backgroundColor">RGB hex color value representing the background color of the label.</param>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="hidden">Indicates if the label is hidden on the UI.</param>
        /// <param name="id">The label ID.</param>
        /// <param name="longName">The description of the label.</param>
        /// <param name="orgUnitId">The org unit associated with the new label.</param>
        /// <param name="shortName">The name of the label shown on records.</param>
        /// <param name="taggedDatumsCount">The number of records with this label assigned.</param>
        /// <param name="updatedAt">The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="userId">The user&#39;s ID.</param>
        public Label(string backgroundColor = default(string), DateTime createdAt = default(DateTime), bool hidden = default(bool), int id = default(int), string longName = default(string), int orgUnitId = default(int), string shortName = default(string), int taggedDatumsCount = default(int), DateTime updatedAt = default(DateTime), int userId = default(int))
        {
            this.BackgroundColor = backgroundColor;
            this.CreatedAt = createdAt;
            this.Hidden = hidden;
            this.Id = id;
            this.LongName = longName;
            this.OrgUnitId = orgUnitId;
            this.ShortName = shortName;
            this.TaggedDatumsCount = taggedDatumsCount;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
        }

        /// <summary>
        /// RGB hex color value representing the background color of the label
        /// </summary>
        /// <value>RGB hex color value representing the background color of the label</value>
        /*
        <example>#FFC906</example>
        */
        [DataMember(Name = "background_color", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Indicates if the label is hidden on the UI
        /// </summary>
        /// <value>Indicates if the label is hidden on the UI</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// The label ID
        /// </summary>
        /// <value>The label ID</value>
        /*
        <example>5</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The description of the label
        /// </summary>
        /// <value>The description of the label</value>
        /*
        <example>This is a label for testing</example>
        */
        [DataMember(Name = "long_name", EmitDefaultValue = false)]
        public string LongName { get; set; }

        /// <summary>
        /// The org unit associated with the new label
        /// </summary>
        /// <value>The org unit associated with the new label</value>
        /*
        <example>108</example>
        */
        [DataMember(Name = "org_unit_id", EmitDefaultValue = false)]
        public int OrgUnitId { get; set; }

        /// <summary>
        /// The name of the label shown on records
        /// </summary>
        /// <value>The name of the label shown on records</value>
        /*
        <example>Test Label</example>
        */
        [DataMember(Name = "short_name", EmitDefaultValue = false)]
        public string ShortName { get; set; }

        /// <summary>
        /// The number of records with this label assigned
        /// </summary>
        /// <value>The number of records with this label assigned</value>
        /*
        <example>7</example>
        */
        [DataMember(Name = "tagged_datums_count", EmitDefaultValue = false)]
        public int TaggedDatumsCount { get; set; }

        /// <summary>
        /// The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// The user&#39;s ID
        /// </summary>
        /// <value>The user&#39;s ID</value>
        /*
        <example>422</example>
        */
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Label {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LongName: ").Append(LongName).Append("\n");
            sb.Append("  OrgUnitId: ").Append(OrgUnitId).Append("\n");
            sb.Append("  ShortName: ").Append(ShortName).Append("\n");
            sb.Append("  TaggedDatumsCount: ").Append(TaggedDatumsCount).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
