/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The token context
    /// </summary>
    [DataContract(Name = "GetContextResponse_context")]
    public partial class GetContextResponseContext : IValidatableObject
    {
        /// <summary>
        /// The type of access token that was used
        /// </summary>
        /// <value>The type of access token that was used</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Jwt for value: jwt
            /// </summary>
            [EnumMember(Value = "jwt")]
            Jwt = 1,

            /// <summary>
            /// Enum Oauth for value: oauth
            /// </summary>
            [EnumMember(Value = "oauth")]
            Oauth = 2,

            /// <summary>
            /// Enum ThirdParty for value: third_party
            /// </summary>
            [EnumMember(Value = "third_party")]
            ThirdParty = 3
        }


        /// <summary>
        /// The type of access token that was used
        /// </summary>
        /// <value>The type of access token that was used</value>
        /*
        <example>jwt</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContextResponseContext" /> class.
        /// </summary>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="dataCenter">The data center that this key is valid for.</param>
        /// <param name="expiresAt">The expires at timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). Only applicable for access tokens with &#x60;jwt&#x60; type.</param>
        /// <param name="integrationId">The ID of the integration this token is associated with, used by third party integrations. Only present when &#39;type&#39; is &#39;third_party&#39;.</param>
        /// <param name="name">The name of the key.</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="type">The type of access token that was used.</param>
        public GetContextResponseContext(DateTime createdAt = default(DateTime), string dataCenter = default(string), DateTime? expiresAt = default(DateTime?), decimal integrationId = default(decimal), string name = default(string), List<string> permissions = default(List<string>), TypeEnum? type = default(TypeEnum?))
        {
            this.CreatedAt = createdAt;
            this.DataCenter = dataCenter;
            this.ExpiresAt = expiresAt;
            this.IntegrationId = integrationId;
            this.Name = name;
            this.Permissions = permissions;
            this.Type = type;
        }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The data center that this key is valid for
        /// </summary>
        /// <value>The data center that this key is valid for</value>
        /*
        <example>US East</example>
        */
        [DataMember(Name = "data_center", EmitDefaultValue = false)]
        public string DataCenter { get; set; }

        /// <summary>
        /// The expires at timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). Only applicable for access tokens with &#x60;jwt&#x60; type
        /// </summary>
        /// <value>The expires at timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6). Only applicable for access tokens with &#x60;jwt&#x60; type</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "expires_at", EmitDefaultValue = true)]
        public DateTime? ExpiresAt { get; set; }

        /// <summary>
        /// The ID of the integration this token is associated with, used by third party integrations. Only present when &#39;type&#39; is &#39;third_party&#39;
        /// </summary>
        /// <value>The ID of the integration this token is associated with, used by third party integrations. Only present when &#39;type&#39; is &#39;third_party&#39;</value>
        /*
        <example>98</example>
        */
        [DataMember(Name = "integration_id", EmitDefaultValue = false)]
        public decimal IntegrationId { get; set; }

        /// <summary>
        /// The name of the key
        /// </summary>
        /// <value>The name of the key</value>
        /*
        <example>My API key</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name = "permissions", EmitDefaultValue = false)]
        public List<string> Permissions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetContextResponseContext {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DataCenter: ").Append(DataCenter).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  IntegrationId: ").Append(IntegrationId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
