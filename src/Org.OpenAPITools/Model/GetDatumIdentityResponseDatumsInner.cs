/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetDatumIdentityResponseDatumsInner
    /// </summary>
    [DataContract(Name = "GetDatumIdentityResponse_datums_inner")]
    public partial class GetDatumIdentityResponseDatumsInner : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AudioType
        /// </summary>
        [DataMember(Name = "audio_type", EmitDefaultValue = false)]
        public AudioType? AudioType { get; set; }

        /// <summary>
        /// Gets or Sets CallDirection
        /// </summary>
        [DataMember(Name = "call_direction", EmitDefaultValue = false)]
        public CallDirection? CallDirection { get; set; }

        /// <summary>
        /// Gets or Sets CallScope
        /// </summary>
        [DataMember(Name = "call_scope", EmitDefaultValue = false)]
        public CallScope? CallScope { get; set; }

        /// <summary>
        /// Gets or Sets PublishingType
        /// </summary>
        [DataMember(Name = "publishing_type", IsRequired = true, EmitDefaultValue = true)]
        public PublishingType PublishingType { get; set; }

        /// <summary>
        /// Gets or Sets VideoType
        /// </summary>
        [DataMember(Name = "video_type", EmitDefaultValue = false)]
        public VideoType? VideoType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDatumIdentityResponseDatumsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetDatumIdentityResponseDatumsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDatumIdentityResponseDatumsInner" /> class.
        /// </summary>
        /// <param name="audioType">audioType.</param>
        /// <param name="callDirection">callDirection.</param>
        /// <param name="callScope">callScope.</param>
        /// <param name="contentType">The content-type of the data. Uses standard [MIME types](https://www.iana.org/assignments/media-types/media-types.xhtml) (required).</param>
        /// <param name="createDate">The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="customTransportType">A custom MIME style string which identifies the platform from which the content was generated.</param>
        /// <param name="dataLength">The datum length in bytes (required).</param>
        /// <param name="hashSha256">A SHA256 hash of the datum content (required).</param>
        /// <param name="identityData">An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded (required).</param>
        /// <param name="originalUri">If the upload was a URL (via the text/x-uri Content-Type), this field will hold the original URI used to download the content.</param>
        /// <param name="publishingType">publishingType (required).</param>
        /// <param name="transportType">MIME formated string which identifies the platform from which the datum was generated (required).</param>
        /// <param name="uploadDate">The datum upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="uuid">Generated by the ingestion service to uniquely identify the datum (required).</param>
        /// <param name="videoType">videoType.</param>
        public GetDatumIdentityResponseDatumsInner(AudioType? audioType = default(AudioType?), CallDirection? callDirection = default(CallDirection?), CallScope? callScope = default(CallScope?), string contentType = default(string), DateTime createDate = default(DateTime), string customTransportType = default(string), int dataLength = default(int), string hashSha256 = default(string), string identityData = default(string), string originalUri = default(string), PublishingType publishingType = default(PublishingType), string transportType = default(string), DateTime uploadDate = default(DateTime), string uuid = default(string), VideoType? videoType = default(VideoType?))
        {
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for GetDatumIdentityResponseDatumsInner and cannot be null");
            }
            this.ContentType = contentType;
            this.CreateDate = createDate;
            this.DataLength = dataLength;
            // to ensure "hashSha256" is required (not null)
            if (hashSha256 == null)
            {
                throw new ArgumentNullException("hashSha256 is a required property for GetDatumIdentityResponseDatumsInner and cannot be null");
            }
            this.HashSha256 = hashSha256;
            // to ensure "identityData" is required (not null)
            if (identityData == null)
            {
                throw new ArgumentNullException("identityData is a required property for GetDatumIdentityResponseDatumsInner and cannot be null");
            }
            this.IdentityData = identityData;
            this.PublishingType = publishingType;
            // to ensure "transportType" is required (not null)
            if (transportType == null)
            {
                throw new ArgumentNullException("transportType is a required property for GetDatumIdentityResponseDatumsInner and cannot be null");
            }
            this.TransportType = transportType;
            this.UploadDate = uploadDate;
            // to ensure "uuid" is required (not null)
            if (uuid == null)
            {
                throw new ArgumentNullException("uuid is a required property for GetDatumIdentityResponseDatumsInner and cannot be null");
            }
            this.Uuid = uuid;
            this.AudioType = audioType;
            this.CallDirection = callDirection;
            this.CallScope = callScope;
            this.CustomTransportType = customTransportType;
            this.OriginalUri = originalUri;
            this.VideoType = videoType;
        }

        /// <summary>
        /// The content-type of the data. Uses standard [MIME types](https://www.iana.org/assignments/media-types/media-types.xhtml)
        /// </summary>
        /// <value>The content-type of the data. Uses standard [MIME types](https://www.iana.org/assignments/media-types/media-types.xhtml)</value>
        /*
        <example>video/mp4</example>
        */
        [DataMember(Name = "content_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-06-07T13:08:43Z</example>
        */
        [DataMember(Name = "create_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// A custom MIME style string which identifies the platform from which the content was generated
        /// </summary>
        /// <value>A custom MIME style string which identifies the platform from which the content was generated</value>
        /*
        <example>video/zoom</example>
        */
        [DataMember(Name = "custom_transport_type", EmitDefaultValue = false)]
        public string CustomTransportType { get; set; }

        /// <summary>
        /// The datum length in bytes
        /// </summary>
        /// <value>The datum length in bytes</value>
        /*
        <example>770537</example>
        */
        [DataMember(Name = "data_length", IsRequired = true, EmitDefaultValue = true)]
        public int DataLength { get; set; }

        /// <summary>
        /// A SHA256 hash of the datum content
        /// </summary>
        /// <value>A SHA256 hash of the datum content</value>
        /*
        <example>3489beffbc55532f4019f49b1a279592f4fdcd5d7dd9c7802ab789405a4e0359</example>
        */
        [DataMember(Name = "hash_sha256", IsRequired = true, EmitDefaultValue = true)]
        public string HashSha256 { get; set; }

        /// <summary>
        /// An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded
        /// </summary>
        /// <value>An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded</value>
        /*
        <example>something-unique</example>
        */
        [DataMember(Name = "identity_data", IsRequired = true, EmitDefaultValue = true)]
        public string IdentityData { get; set; }

        /// <summary>
        /// If the upload was a URL (via the text/x-uri Content-Type), this field will hold the original URI used to download the content
        /// </summary>
        /// <value>If the upload was a URL (via the text/x-uri Content-Type), this field will hold the original URI used to download the content</value>
        /*
        <example>https://youtu.be/dQw4w9WgXcQ</example>
        */
        [DataMember(Name = "original_uri", EmitDefaultValue = false)]
        public string OriginalUri { get; set; }

        /// <summary>
        /// MIME formated string which identifies the platform from which the datum was generated
        /// </summary>
        /// <value>MIME formated string which identifies the platform from which the datum was generated</value>
        /*
        <example>video/zoomarchive</example>
        */
        [DataMember(Name = "transport_type", IsRequired = true, EmitDefaultValue = true)]
        public string TransportType { get; set; }

        /// <summary>
        /// The datum upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The datum upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-06-07T13:13:50.925Z</example>
        */
        [DataMember(Name = "upload_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UploadDate { get; set; }

        /// <summary>
        /// Generated by the ingestion service to uniquely identify the datum
        /// </summary>
        /// <value>Generated by the ingestion service to uniquely identify the datum</value>
        /*
        <example>a50e8729-0453-5908-02a7-50f6e0e9c654</example>
        */
        [DataMember(Name = "uuid", IsRequired = true, EmitDefaultValue = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetDatumIdentityResponseDatumsInner {\n");
            sb.Append("  AudioType: ").Append(AudioType).Append("\n");
            sb.Append("  CallDirection: ").Append(CallDirection).Append("\n");
            sb.Append("  CallScope: ").Append(CallScope).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CustomTransportType: ").Append(CustomTransportType).Append("\n");
            sb.Append("  DataLength: ").Append(DataLength).Append("\n");
            sb.Append("  HashSha256: ").Append(HashSha256).Append("\n");
            sb.Append("  IdentityData: ").Append(IdentityData).Append("\n");
            sb.Append("  OriginalUri: ").Append(OriginalUri).Append("\n");
            sb.Append("  PublishingType: ").Append(PublishingType).Append("\n");
            sb.Append("  TransportType: ").Append(TransportType).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  VideoType: ").Append(VideoType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
