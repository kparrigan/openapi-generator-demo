/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostChatConversationBodyChat
    /// </summary>
    [DataContract(Name = "PostChatConversationBody_chat")]
    public partial class PostChatConversationBodyChat : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChat" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostChatConversationBodyChat() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChat" /> class.
        /// </summary>
        /// <param name="application">application (required).</param>
        /// <param name="conversation">conversation (required).</param>
        /// <param name="messages">messages (required).</param>
        /// <param name="attachments">An array of meta data for all the attachments. If there are no attachments, this should just be an empty array. (required).</param>
        public PostChatConversationBodyChat(PostChatConversationBodyChatApplication application = default(PostChatConversationBodyChatApplication), PostChatConversationBodyChatConversation conversation = default(PostChatConversationBodyChatConversation), List<PostChatConversationBodyChatMessagesInner> messages = default(List<PostChatConversationBodyChatMessagesInner>), List<PostChatConversationBodyChatAttachmentsInner> attachments = default(List<PostChatConversationBodyChatAttachmentsInner>))
        {
            // to ensure "application" is required (not null)
            if (application == null)
            {
                throw new ArgumentNullException("application is a required property for PostChatConversationBodyChat and cannot be null");
            }
            this.Application = application;
            // to ensure "conversation" is required (not null)
            if (conversation == null)
            {
                throw new ArgumentNullException("conversation is a required property for PostChatConversationBodyChat and cannot be null");
            }
            this.Conversation = conversation;
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for PostChatConversationBodyChat and cannot be null");
            }
            this.Messages = messages;
            // to ensure "attachments" is required (not null)
            if (attachments == null)
            {
                throw new ArgumentNullException("attachments is a required property for PostChatConversationBodyChat and cannot be null");
            }
            this.Attachments = attachments;
        }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", IsRequired = true, EmitDefaultValue = true)]
        public PostChatConversationBodyChatApplication Application { get; set; }

        /// <summary>
        /// Gets or Sets Conversation
        /// </summary>
        [DataMember(Name = "conversation", IsRequired = true, EmitDefaultValue = true)]
        public PostChatConversationBodyChatConversation Conversation { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        /*
        <example>[{&quot;id&quot;:&quot;message-1&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Whats your favorite color?&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T13:08:43Z&quot;},{&quot;id&quot;:&quot;message-2&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Hey want to go to lunch?&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T14:08:43Z&quot;},{&quot;id&quot;:&quot;message-3&quot;,&quot;participant_id&quot;:&quot;user2&quot;,&quot;text&quot;:&quot;Sorry! Totally thought I responded to this message. Its blue ðŸ’™ ðŸ˜€&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T14:09:43Z&quot;,&quot;reply_to_message_id&quot;:&quot;message-1&quot;},{&quot;id&quot;:&quot;message-4&quot;,&quot;participant_id&quot;:&quot;user2&quot;,&quot;text&quot;:&quot;Yes! Lets go to lunch. Want to go to Alreado&#39;s Pizza Cafe?&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-08T14:10:43Z&quot;},{&quot;id&quot;:&quot;message-5&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Blue is okay, not my favorite&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-08T14:11:43Z&quot;,&quot;deleted_timestamp&quot;:&quot;2023-06-08T14:11:43Z&quot;,&quot;reply_to_message_id&quot;:&quot;message-3&quot;},{&quot;id&quot;:&quot;message-6&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Thats my favorite too!&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T14:12:00Z&quot;,&quot;reply_to_message_id&quot;:&quot;message-3&quot;},{&quot;id&quot;:&quot;message-7&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Lets do pizza by Alredo?&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T15:12:43Z&quot;},{&quot;id&quot;:&quot;message-8&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;Lets do pizza by Alredo!&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T15:13:43Z&quot;,&quot;edited_message_id&quot;:&quot;message-7&quot;},{&quot;id&quot;:&quot;message-9&quot;,&quot;participant_id&quot;:&quot;user1&quot;,&quot;text&quot;:&quot;ðŸ’™&quot;,&quot;content_type&quot;:&quot;text/plain&quot;,&quot;timestamp&quot;:&quot;2023-06-07T15:14:43Z&quot;,&quot;reaction_to_message_id&quot;:&quot;message-3&quot;}]</example>
        */
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<PostChatConversationBodyChatMessagesInner> Messages { get; set; }

        /// <summary>
        /// An array of meta data for all the attachments. If there are no attachments, this should just be an empty array.
        /// </summary>
        /// <value>An array of meta data for all the attachments. If there are no attachments, this should just be an empty array.</value>
        [DataMember(Name = "attachments", IsRequired = true, EmitDefaultValue = true)]
        public List<PostChatConversationBodyChatAttachmentsInner> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostChatConversationBodyChat {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Conversation: ").Append(Conversation).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
