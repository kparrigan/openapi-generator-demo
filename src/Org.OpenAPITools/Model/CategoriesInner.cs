/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CategoriesInner
    /// </summary>
    [DataContract(Name = "categories_inner")]
    public partial class CategoriesInner : IValidatableObject
    {
        /// <summary>
        /// Detection type permitted in this category
        /// </summary>
        /// <value>Detection type permitted in this category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DetectionTypeEnum
        {
            /// <summary>
            /// Enum SPEECH for value: SPEECH
            /// </summary>
            [EnumMember(Value = "SPEECH")]
            SPEECH = 1,

            /// <summary>
            /// Enum SPOKEN for value: SPOKEN
            /// </summary>
            [EnumMember(Value = "SPOKEN")]
            SPOKEN = 2,

            /// <summary>
            /// Enum SCREEN for value: SCREEN
            /// </summary>
            [EnumMember(Value = "SCREEN")]
            SCREEN = 3,

            /// <summary>
            /// Enum DOCUMENT for value: DOCUMENT
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENT = 4,

            /// <summary>
            /// Enum CHAT for value: CHAT
            /// </summary>
            [EnumMember(Value = "CHAT")]
            CHAT = 5,

            /// <summary>
            /// Enum BOTH for value: BOTH
            /// </summary>
            [EnumMember(Value = "BOTH")]
            BOTH = 6
        }


        /// <summary>
        /// Detection type permitted in this category
        /// </summary>
        /// <value>Detection type permitted in this category</value>
        /*
        <example>SCREEN</example>
        */
        [DataMember(Name = "detection_type", EmitDefaultValue = false)]
        public DetectionTypeEnum? DetectionType { get; set; }
        /// <summary>
        /// Defines how a detection impacts the risk of datums
        /// </summary>
        /// <value>Defines how a detection impacts the risk of datums</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RiskTypeEnum
        {
            /// <summary>
            /// Enum VALIDATION for value: VALIDATION
            /// </summary>
            [EnumMember(Value = "VALIDATION")]
            VALIDATION = 1,

            /// <summary>
            /// Enum INFORMATION for value: INFORMATION
            /// </summary>
            [EnumMember(Value = "INFORMATION")]
            INFORMATION = 2,

            /// <summary>
            /// Enum RISK for value: RISK
            /// </summary>
            [EnumMember(Value = "RISK")]
            RISK = 3
        }


        /// <summary>
        /// Defines how a detection impacts the risk of datums
        /// </summary>
        /// <value>Defines how a detection impacts the risk of datums</value>
        /*
        <example>INFORMATION</example>
        */
        [DataMember(Name = "risk_type", EmitDefaultValue = false)]
        public RiskTypeEnum? RiskType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesInner" /> class.
        /// </summary>
        /// <param name="categoryGroupId">The category&#39;s group ID.</param>
        /// <param name="createdAt">The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="deprecated">Indicates if the category has been deprecated.</param>
        /// <param name="description">Describes the category.</param>
        /// <param name="detectionMediaTypes">An array of the detection media types in this category.</param>
        /// <param name="detectionType">Detection type permitted in this category.</param>
        /// <param name="disabledAt">Timestamp of when the category was disabled. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="disclaimer">Indicates that this category is detecting for the presence of a disclaimer.</param>
        /// <param name="fromDate">Only datums after this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="hidden">Indicates if the category is hidden on the UI.</param>
        /// <param name="id">The category&#39;s ID.</param>
        /// <param name="identifier">Unique text identifier for the category.</param>
        /// <param name="keywords">Indicates that this category is a customer classifier that uses keywords.</param>
        /// <param name="name">The category&#39;s name.</param>
        /// <param name="riskType">Defines how a detection impacts the risk of datums.</param>
        /// <param name="status">The category&#39;s status.</param>
        /// <param name="statusColor">A color representing the category&#39;s status.</param>
        /// <param name="terms">A new line (&#x60;\\n&#x60;) separated list of terms used for detections.</param>
        /// <param name="toDate">Only datums up to this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="updatedAt">The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        public CategoriesInner(int categoryGroupId = default(int), DateTime createdAt = default(DateTime), bool deprecated = default(bool), string description = default(string), List<CategoriesInnerDetectionMediaTypesInner> detectionMediaTypes = default(List<CategoriesInnerDetectionMediaTypesInner>), DetectionTypeEnum? detectionType = default(DetectionTypeEnum?), DateTime? disabledAt = default(DateTime?), bool disclaimer = default(bool), DateTime? fromDate = default(DateTime?), bool hidden = default(bool), int id = default(int), string identifier = default(string), bool keywords = default(bool), string name = default(string), RiskTypeEnum? riskType = default(RiskTypeEnum?), string status = default(string), string statusColor = default(string), string terms = default(string), DateTime? toDate = default(DateTime?), DateTime updatedAt = default(DateTime))
        {
            this.CategoryGroupId = categoryGroupId;
            this.CreatedAt = createdAt;
            this.Deprecated = deprecated;
            this.Description = description;
            this.DetectionMediaTypes = detectionMediaTypes;
            this.DetectionType = detectionType;
            this.DisabledAt = disabledAt;
            this.Disclaimer = disclaimer;
            this.FromDate = fromDate;
            this.Hidden = hidden;
            this.Id = id;
            this.Identifier = identifier;
            this.Keywords = keywords;
            this.Name = name;
            this.RiskType = riskType;
            this.Status = status;
            this.StatusColor = statusColor;
            this.Terms = terms;
            this.ToDate = toDate;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The category&#39;s group ID
        /// </summary>
        /// <value>The category&#39;s group ID</value>
        /*
        <example>275</example>
        */
        [DataMember(Name = "category_group_id", EmitDefaultValue = false)]
        public int CategoryGroupId { get; set; }

        /// <summary>
        /// The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The created timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Indicates if the category has been deprecated
        /// </summary>
        /// <value>Indicates if the category has been deprecated</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "deprecated", EmitDefaultValue = true)]
        public bool Deprecated { get; set; }

        /// <summary>
        /// Describes the category
        /// </summary>
        /// <value>Describes the category</value>
        /*
        <example>Apps shared on screen</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// An array of the detection media types in this category
        /// </summary>
        /// <value>An array of the detection media types in this category</value>
        [DataMember(Name = "detection_media_types", EmitDefaultValue = false)]
        public List<CategoriesInnerDetectionMediaTypesInner> DetectionMediaTypes { get; set; }

        /// <summary>
        /// Timestamp of when the category was disabled. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>Timestamp of when the category was disabled. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        [DataMember(Name = "disabled_at", EmitDefaultValue = true)]
        public DateTime? DisabledAt { get; set; }

        /// <summary>
        /// Indicates that this category is detecting for the presence of a disclaimer
        /// </summary>
        /// <value>Indicates that this category is detecting for the presence of a disclaimer</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "disclaimer", EmitDefaultValue = true)]
        public bool Disclaimer { get; set; }

        /// <summary>
        /// Only datums after this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>Only datums after this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        [DataMember(Name = "from_date", EmitDefaultValue = true)]
        public DateTime? FromDate { get; set; }

        /// <summary>
        /// Indicates if the category is hidden on the UI
        /// </summary>
        /// <value>Indicates if the category is hidden on the UI</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// The category&#39;s ID
        /// </summary>
        /// <value>The category&#39;s ID</value>
        /*
        <example>388</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Unique text identifier for the category
        /// </summary>
        /// <value>Unique text identifier for the category</value>
        /*
        <example>APPS_ON_SCREEN</example>
        */
        [DataMember(Name = "identifier", EmitDefaultValue = false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Indicates that this category is a customer classifier that uses keywords
        /// </summary>
        /// <value>Indicates that this category is a customer classifier that uses keywords</value>
        /*
        <example>false</example>
        */
        [DataMember(Name = "keywords", EmitDefaultValue = true)]
        public bool Keywords { get; set; }

        /// <summary>
        /// The category&#39;s name
        /// </summary>
        /// <value>The category&#39;s name</value>
        /*
        <example>Online Apps and Portals</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The category&#39;s status
        /// </summary>
        /// <value>The category&#39;s status</value>
        /*
        <example>Active</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// A color representing the category&#39;s status
        /// </summary>
        /// <value>A color representing the category&#39;s status</value>
        /*
        <example>#0bb676</example>
        */
        [DataMember(Name = "status_color", EmitDefaultValue = false)]
        public string StatusColor { get; set; }

        /// <summary>
        /// A new line (&#x60;\\n&#x60;) separated list of terms used for detections
        /// </summary>
        /// <value>A new line (&#x60;\\n&#x60;) separated list of terms used for detections</value>
        /*
        <example>&quot;term1&quot;\n&quot;term2&quot;\n&quot;term3&quot;</example>
        */
        [DataMember(Name = "terms", EmitDefaultValue = true)]
        public string Terms { get; set; }

        /// <summary>
        /// Only datums up to this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>Only datums up to this date are permitted in this category. Uses the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        [DataMember(Name = "to_date", EmitDefaultValue = true)]
        public DateTime? ToDate { get; set; }

        /// <summary>
        /// The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The updated timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoriesInner {\n");
            sb.Append("  CategoryGroupId: ").Append(CategoryGroupId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DetectionMediaTypes: ").Append(DetectionMediaTypes).Append("\n");
            sb.Append("  DetectionType: ").Append(DetectionType).Append("\n");
            sb.Append("  DisabledAt: ").Append(DisabledAt).Append("\n");
            sb.Append("  Disclaimer: ").Append(Disclaimer).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RiskType: ").Append(RiskType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusColor: ").Append(StatusColor).Append("\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
