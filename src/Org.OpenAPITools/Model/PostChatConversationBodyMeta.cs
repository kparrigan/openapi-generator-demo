/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostChatConversationBodyMeta
    /// </summary>
    [DataContract(Name = "PostChatConversationBody_meta")]
    public partial class PostChatConversationBodyMeta : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostChatConversationBodyMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyMeta" /> class.
        /// </summary>
        /// <param name="createDate">The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="customTransportType">A custom MIME style string which identifies the platform from which the content was generated.</param>
        /// <param name="fileName">A **title** for this chat conversation. This is what will appear in the UI as the name of the conversation (required).</param>
        /// <param name="identityData">An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded (required).</param>
        /// <param name="platformAttributes">An open set of key-value pairs that can be used to store platform attributes. API platform attributes are only searchable by exact string match..</param>
        /// <param name="participants">participants.</param>
        public PostChatConversationBodyMeta(DateTime createDate = default(DateTime), string customTransportType = default(string), string fileName = default(string), string identityData = default(string), Dictionary<string, string> platformAttributes = default(Dictionary<string, string>), ChatParticipants participants = default(ChatParticipants))
        {
            this.CreateDate = createDate;
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for PostChatConversationBodyMeta and cannot be null");
            }
            this.FileName = fileName;
            // to ensure "identityData" is required (not null)
            if (identityData == null)
            {
                throw new ArgumentNullException("identityData is a required property for PostChatConversationBodyMeta and cannot be null");
            }
            this.IdentityData = identityData;
            this.CustomTransportType = customTransportType;
            this.PlatformAttributes = platformAttributes;
            this.Participants = participants;
        }

        /// <summary>
        /// The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The data creation timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-06-07T13:08:43Z</example>
        */
        [DataMember(Name = "create_date", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreateDate { get; set; }

        /// <summary>
        /// A custom MIME style string which identifies the platform from which the content was generated
        /// </summary>
        /// <value>A custom MIME style string which identifies the platform from which the content was generated</value>
        /*
        <example>video/zoom</example>
        */
        [DataMember(Name = "custom_transport_type", EmitDefaultValue = false)]
        public string CustomTransportType { get; set; }

        /// <summary>
        /// A **title** for this chat conversation. This is what will appear in the UI as the name of the conversation
        /// </summary>
        /// <value>A **title** for this chat conversation. This is what will appear in the UI as the name of the conversation</value>
        /*
        <example>Chat between Jim and Pam</example>
        */
        [DataMember(Name = "file_name", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded
        /// </summary>
        /// <value>An arbitrary string identifier specified by the client which can be used to check if the data has been uploaded</value>
        /*
        <example>something-unique</example>
        */
        [DataMember(Name = "identity_data", IsRequired = true, EmitDefaultValue = true)]
        public string IdentityData { get; set; }

        /// <summary>
        /// An open set of key-value pairs that can be used to store platform attributes. API platform attributes are only searchable by exact string match.
        /// </summary>
        /// <value>An open set of key-value pairs that can be used to store platform attributes. API platform attributes are only searchable by exact string match.</value>
        /*
        <example>{&quot;call_id&quot;:&quot;2909b385-f84c-4935-bef0-87e6c6a3939b&quot;,&quot;channel_id&quot;:&quot;4&quot;,&quot;duration&quot;:&quot;1h02m29s&quot;}</example>
        */
        [DataMember(Name = "platform_attributes", EmitDefaultValue = false)]
        public Dictionary<string, string> PlatformAttributes { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name = "participants", EmitDefaultValue = false)]
        public ChatParticipants Participants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostChatConversationBodyMeta {\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  CustomTransportType: ").Append(CustomTransportType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  IdentityData: ").Append(IdentityData).Append("\n");
            sb.Append("  PlatformAttributes: ").Append(PlatformAttributes).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
