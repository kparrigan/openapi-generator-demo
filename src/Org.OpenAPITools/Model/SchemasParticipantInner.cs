/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SchemasParticipantInner
    /// </summary>
    [DataContract(Name = "schemas_participant_inner")]
    public partial class SchemasParticipantInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemasParticipantInner" /> class.
        /// </summary>
        /// <param name="email">Participant&#39;s email, if null the content source did not provide the information.</param>
        /// <param name="id">The id given to the participant from the platform.</param>
        /// <param name="joinLeaveInfo">Participant&#39;s join and leave times, if null the content source did not provide the information.</param>
        /// <param name="name">Participant&#39;s first name, if null the content source did not provide the information.</param>
        /// <param name="orgRelationship">Participant&#39;s org relationship, if null the content source did not indicate.</param>
        public SchemasParticipantInner(string email = default(string), string id = default(string), List<SchemasParticipantInnerJoinLeaveInfoInner> joinLeaveInfo = default(List<SchemasParticipantInnerJoinLeaveInfoInner>), string name = default(string), string orgRelationship = default(string))
        {
            this.Email = email;
            this.Id = id;
            this.JoinLeaveInfo = joinLeaveInfo;
            this.Name = name;
            this.OrgRelationship = orgRelationship;
        }

        /// <summary>
        /// Participant&#39;s email, if null the content source did not provide the information
        /// </summary>
        /// <value>Participant&#39;s email, if null the content source did not provide the information</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// The id given to the participant from the platform
        /// </summary>
        /// <value>The id given to the participant from the platform</value>
        /*
        <example>1202498425120564</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Participant&#39;s join and leave times, if null the content source did not provide the information
        /// </summary>
        /// <value>Participant&#39;s join and leave times, if null the content source did not provide the information</value>
        [DataMember(Name = "join_leave_info", EmitDefaultValue = true)]
        public List<SchemasParticipantInnerJoinLeaveInfoInner> JoinLeaveInfo { get; set; }

        /// <summary>
        /// Participant&#39;s first name, if null the content source did not provide the information
        /// </summary>
        /// <value>Participant&#39;s first name, if null the content source did not provide the information</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Participant&#39;s org relationship, if null the content source did not indicate
        /// </summary>
        /// <value>Participant&#39;s org relationship, if null the content source did not indicate</value>
        [DataMember(Name = "org_relationship", EmitDefaultValue = true)]
        public string OrgRelationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SchemasParticipantInner {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  JoinLeaveInfo: ").Append(JoinLeaveInfo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OrgRelationship: ").Append(OrgRelationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
