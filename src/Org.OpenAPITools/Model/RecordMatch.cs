/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RecordMatch
    /// </summary>
    [DataContract(Name = "RecordMatch")]
    public partial class RecordMatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordMatch" /> class.
        /// </summary>
        /// <param name="archiveHandles">List of archive handles for the record.</param>
        /// <param name="error">A user friendly message for a bad request query.</param>
        /// <param name="mediaType">The media type for the record.</param>
        /// <param name="recordId">The record id. This id matches the portal record-id.</param>
        /// <param name="uploadDate">Record upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6).</param>
        /// <param name="uuid">The uuid for the record. This id matches the portal record id.</param>
        public RecordMatch(List<RecordMatchArchiveHandlesInner> archiveHandles = default(List<RecordMatchArchiveHandlesInner>), string error = default(string), string mediaType = default(string), int recordId = default(int), DateTime uploadDate = default(DateTime), string uuid = default(string))
        {
            this.ArchiveHandles = archiveHandles;
            this.Error = error;
            this.MediaType = mediaType;
            this.RecordId = recordId;
            this.UploadDate = uploadDate;
            this.Uuid = uuid;
        }

        /// <summary>
        /// List of archive handles for the record
        /// </summary>
        /// <value>List of archive handles for the record</value>
        [DataMember(Name = "archive_handles", EmitDefaultValue = false)]
        public List<RecordMatchArchiveHandlesInner> ArchiveHandles { get; set; }

        /// <summary>
        /// A user friendly message for a bad request query
        /// </summary>
        /// <value>A user friendly message for a bad request query</value>
        /*
        <example>one or more attributes supplied cannot use includes_timestamp constraint</example>
        */
        [DataMember(Name = "error", EmitDefaultValue = true)]
        public string Error { get; set; }

        /// <summary>
        /// The media type for the record
        /// </summary>
        /// <value>The media type for the record</value>
        /*
        <example>chat</example>
        */
        [DataMember(Name = "media_type", EmitDefaultValue = false)]
        public string MediaType { get; set; }

        /// <summary>
        /// The record id. This id matches the portal record-id
        /// </summary>
        /// <value>The record id. This id matches the portal record-id</value>
        /*
        <example>12</example>
        */
        [DataMember(Name = "record_id", EmitDefaultValue = false)]
        public int RecordId { get; set; }

        /// <summary>
        /// Record upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>Record upload timestamp using the [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "upload_date", EmitDefaultValue = false)]
        public DateTime UploadDate { get; set; }

        /// <summary>
        /// The uuid for the record. This id matches the portal record id
        /// </summary>
        /// <value>The uuid for the record. This id matches the portal record id</value>
        /*
        <example>95292686-cbbb-b8c0-0351-25dab7c2154d</example>
        */
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordMatch {\n");
            sb.Append("  ArchiveHandles: ").Append(ArchiveHandles).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  UploadDate: ").Append(UploadDate).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
