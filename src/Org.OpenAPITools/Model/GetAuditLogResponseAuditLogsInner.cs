/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetAuditLogResponseAuditLogsInner
    /// </summary>
    [DataContract(Name = "GetAuditLogResponse_audit_logs_inner")]
    public partial class GetAuditLogResponseAuditLogsInner : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AuditableAction
        /// </summary>
        [DataMember(Name = "auditable_action", EmitDefaultValue = false)]
        public AuditableAction? AuditableAction { get; set; }

        /// <summary>
        /// Gets or Sets AuditableType
        /// </summary>
        [DataMember(Name = "auditable_type", EmitDefaultValue = false)]
        public AuditableType? AuditableType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAuditLogResponseAuditLogsInner" /> class.
        /// </summary>
        /// <param name="auditLogDetails">auditLogDetails.</param>
        /// <param name="auditableAction">auditableAction.</param>
        /// <param name="auditableId">The ID of the user who performed this action.</param>
        /// <param name="auditableType">auditableType.</param>
        /// <param name="createdAt">Audit log creation timestamp.</param>
        /// <param name="customer">customer.</param>
        /// <param name="description">Description of the audited action.</param>
        /// <param name="id">Audit log ID.</param>
        /// <param name="orgUnit">orgUnit.</param>
        /// <param name="updatedAt">Audit log update timestamp.</param>
        /// <param name="user">user.</param>
        public GetAuditLogResponseAuditLogsInner(List<GetAuditLogResponseAuditLogsInnerAuditLogDetailsInner> auditLogDetails = default(List<GetAuditLogResponseAuditLogsInnerAuditLogDetailsInner>), AuditableAction? auditableAction = default(AuditableAction?), int auditableId = default(int), AuditableType? auditableType = default(AuditableType?), DateTime createdAt = default(DateTime), GetAuditLogResponseAuditLogsInnerCustomer customer = default(GetAuditLogResponseAuditLogsInnerCustomer), string description = default(string), int id = default(int), GetAuditLogResponseAuditLogsInnerOrgUnit orgUnit = default(GetAuditLogResponseAuditLogsInnerOrgUnit), DateTime updatedAt = default(DateTime), GetAuditLogResponseAuditLogsInnerUser user = default(GetAuditLogResponseAuditLogsInnerUser))
        {
            this.AuditLogDetails = auditLogDetails;
            this.AuditableAction = auditableAction;
            this.AuditableId = auditableId;
            this.AuditableType = auditableType;
            this.CreatedAt = createdAt;
            this.Customer = customer;
            this.Description = description;
            this.Id = id;
            this.OrgUnit = orgUnit;
            this.UpdatedAt = updatedAt;
            this.User = user;
        }

        /// <summary>
        /// Gets or Sets AuditLogDetails
        /// </summary>
        [DataMember(Name = "audit_log_details", EmitDefaultValue = true)]
        public List<GetAuditLogResponseAuditLogsInnerAuditLogDetailsInner> AuditLogDetails { get; set; }

        /// <summary>
        /// The ID of the user who performed this action
        /// </summary>
        /// <value>The ID of the user who performed this action</value>
        /*
        <example>23</example>
        */
        [DataMember(Name = "auditable_id", EmitDefaultValue = false)]
        public int AuditableId { get; set; }

        /// <summary>
        /// Audit log creation timestamp
        /// </summary>
        /// <value>Audit log creation timestamp</value>
        /*
        <example>2021-06-16T01:37:04.262Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = false)]
        public GetAuditLogResponseAuditLogsInnerCustomer Customer { get; set; }

        /// <summary>
        /// Description of the audited action
        /// </summary>
        /// <value>Description of the audited action</value>
        /*
        <example>Some descriptive text here</example>
        */
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Audit log ID
        /// </summary>
        /// <value>Audit log ID</value>
        /*
        <example>98</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets OrgUnit
        /// </summary>
        [DataMember(Name = "org_unit", EmitDefaultValue = false)]
        public GetAuditLogResponseAuditLogsInnerOrgUnit OrgUnit { get; set; }

        /// <summary>
        /// Audit log update timestamp
        /// </summary>
        /// <value>Audit log update timestamp</value>
        /*
        <example>2022-10-12T02:29:49.146Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = false)]
        public GetAuditLogResponseAuditLogsInnerUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAuditLogResponseAuditLogsInner {\n");
            sb.Append("  AuditLogDetails: ").Append(AuditLogDetails).Append("\n");
            sb.Append("  AuditableAction: ").Append(AuditableAction).Append("\n");
            sb.Append("  AuditableId: ").Append(AuditableId).Append("\n");
            sb.Append("  AuditableType: ").Append(AuditableType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OrgUnit: ").Append(OrgUnit).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
