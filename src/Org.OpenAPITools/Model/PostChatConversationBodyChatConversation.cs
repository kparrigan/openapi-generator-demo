/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostChatConversationBodyChatConversation
    /// </summary>
    [DataContract(Name = "PostChatConversationBody_chat_conversation")]
    public partial class PostChatConversationBodyChatConversation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChatConversation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostChatConversationBodyChatConversation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChatConversationBodyChatConversation" /> class.
        /// </summary>
        /// <param name="id">The chat conversation&#39;s ID (required).</param>
        /// <param name="name">The chat conversation&#39;s name (required).</param>
        /// <param name="beginTime">The chat conversation&#39;s begin time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="endTime">The chat conversation&#39;s end time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6) (required).</param>
        /// <param name="previousUuid">The UUID of the conversation&#39;s previous chat messages. Required if connecting chat messages into a conversation..</param>
        public PostChatConversationBodyChatConversation(string id = default(string), string name = default(string), DateTime beginTime = default(DateTime), DateTime endTime = default(DateTime), string previousUuid = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for PostChatConversationBodyChatConversation and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostChatConversationBodyChatConversation and cannot be null");
            }
            this.Name = name;
            this.BeginTime = beginTime;
            this.EndTime = endTime;
            this.PreviousUuid = previousUuid;
        }

        /// <summary>
        /// The chat conversation&#39;s ID
        /// </summary>
        /// <value>The chat conversation&#39;s ID</value>
        /*
        <example>some-id-string-here-2</example>
        */
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The chat conversation&#39;s name
        /// </summary>
        /// <value>The chat conversation&#39;s name</value>
        /*
        <example>Conversation between Jim and Pam</example>
        */
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The chat conversation&#39;s begin time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The chat conversation&#39;s begin time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-12-09T13:13:50.925Z</example>
        */
        [DataMember(Name = "begin_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime BeginTime { get; set; }

        /// <summary>
        /// The chat conversation&#39;s end time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)
        /// </summary>
        /// <value>The chat conversation&#39;s end time in [RFC3339 date-time format](https://www.rfc-editor.org/rfc/rfc3339#section-5.6)</value>
        /*
        <example>2023-12-09T17:13:50.925Z</example>
        */
        [DataMember(Name = "end_time", IsRequired = true, EmitDefaultValue = true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// The UUID of the conversation&#39;s previous chat messages. Required if connecting chat messages into a conversation.
        /// </summary>
        /// <value>The UUID of the conversation&#39;s previous chat messages. Required if connecting chat messages into a conversation.</value>
        /*
        <example>UUID to previous chat message</example>
        */
        [DataMember(Name = "previous_uuid", EmitDefaultValue = false)]
        public string PreviousUuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostChatConversationBodyChatConversation {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BeginTime: ").Append(BeginTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  PreviousUuid: ").Append(PreviousUuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
