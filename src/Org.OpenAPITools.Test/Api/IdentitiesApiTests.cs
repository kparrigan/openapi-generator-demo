/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing IdentitiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IdentitiesApiTests : IDisposable
    {
        private IdentitiesApi instance;

        public IdentitiesApiTests()
        {
            instance = new IdentitiesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of IdentitiesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' IdentitiesApi
            //Assert.IsType<IdentitiesApi>(instance);
        }

        /// <summary>
        /// Test IdentitiesExtraAttributesIdDelete
        /// </summary>
        [Fact]
        public void IdentitiesExtraAttributesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.IdentitiesExtraAttributesIdDelete(id);
            //Assert.IsType<DeleteExtraAttributeResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesExtraAttributesIdGet
        /// </summary>
        [Fact]
        public void IdentitiesExtraAttributesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.IdentitiesExtraAttributesIdGet(id);
            //Assert.IsType<GetExtraAttributeResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesExtraAttributesIdMakePrimaryPut
        /// </summary>
        [Fact]
        public void IdentitiesExtraAttributesIdMakePrimaryPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.IdentitiesExtraAttributesIdMakePrimaryPut(id);
            //Assert.IsType<PutExtraAttributePrimaryResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesExtraAttributesIdPut
        /// </summary>
        [Fact]
        public void IdentitiesExtraAttributesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //ExtraAttributeBody extraAttributeBody = null;
            //var response = instance.IdentitiesExtraAttributesIdPut(id, extraAttributeBody);
            //Assert.IsType<PutExtraAttributeResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesGet
        /// </summary>
        [Fact]
        public void IdentitiesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? pageToken = null;
            //int? max = null;
            //string? query = null;
            //var response = instance.IdentitiesGet(pageToken, max, query);
            //Assert.IsType<GetIdentitiesResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdDelete
        /// </summary>
        [Fact]
        public void IdentitiesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.IdentitiesIdDelete(id);
            //Assert.IsType<DeleteIdentityByIdResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdExtraAttributesPost
        /// </summary>
        [Fact]
        public void IdentitiesIdExtraAttributesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //ExtraAttributeBody extraAttributeBody = null;
            //var response = instance.IdentitiesIdExtraAttributesPost(id, extraAttributeBody);
            //Assert.IsType<PostExtraAttributeResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdGet
        /// </summary>
        [Fact]
        public void IdentitiesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.IdentitiesIdGet(id);
            //Assert.IsType<GetIdentityByIdResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdPut
        /// </summary>
        [Fact]
        public void IdentitiesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PutIdentityByIdRequest putIdentityByIdRequest = null;
            //var response = instance.IdentitiesIdPut(id, putIdentityByIdRequest);
            //Assert.IsType<PutIdentityByIdResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdRiskGet
        /// </summary>
        [Fact]
        public void IdentitiesIdRiskGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //string? pageToken = null;
            //int? max = null;
            //var response = instance.IdentitiesIdRiskGet(id, pageToken, max);
            //Assert.IsType<GetRiskLogResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesIdRiskPost
        /// </summary>
        [Fact]
        public void IdentitiesIdRiskPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PostIdentityRiskRequest? postIdentityRiskRequest = null;
            //var response = instance.IdentitiesIdRiskPost(id, postIdentityRiskRequest);
            //Assert.IsType<PostIdentityRiskResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesPost
        /// </summary>
        [Fact]
        public void IdentitiesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostIdentityRequest postIdentityRequest = null;
            //var response = instance.IdentitiesPost(postIdentityRequest);
            //Assert.IsType<PostIdentityResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesPut
        /// </summary>
        [Fact]
        public void IdentitiesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IdentitiesPutRequest identitiesPutRequest = null;
            //var response = instance.IdentitiesPut(identitiesPutRequest);
            //Assert.IsType<PutMergeIdentitiesResponse>(response);
        }

        /// <summary>
        /// Test IdentitiesSearchGet
        /// </summary>
        [Fact]
        public void IdentitiesSearchGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? pageToken = null;
            //int? max = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //bool? managed = null;
            //var response = instance.IdentitiesSearchGet(pageToken, max, start, end, managed);
            //Assert.IsType<GetIdentitiesBySearchResponse>(response);
        }
    }
}
