/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UsersApi
            //Assert.IsType<UsersApi>(instance);
        }

        /// <summary>
        /// Test UsersGet
        /// </summary>
        [Fact]
        public void UsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersGet();
            //Assert.IsType<GetUsersResponse>(response);
        }

        /// <summary>
        /// Test UsersIdDelete
        /// </summary>
        [Fact]
        public void UsersIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UsersIdDelete(id);
            //Assert.IsType<PutUserByIdResponse>(response);
        }

        /// <summary>
        /// Test UsersIdDisablePut
        /// </summary>
        [Fact]
        public void UsersIdDisablePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UsersIdDisablePut(id);
            //Assert.IsType<DeleteUserResponse>(response);
        }

        /// <summary>
        /// Test UsersIdEnablePut
        /// </summary>
        [Fact]
        public void UsersIdEnablePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UsersIdEnablePut(id);
            //Assert.IsType<ReenableUserResponse>(response);
        }

        /// <summary>
        /// Test UsersIdGet
        /// </summary>
        [Fact]
        public void UsersIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UsersIdGet(id);
            //Assert.IsType<GetUserByIdResponse>(response);
        }

        /// <summary>
        /// Test UsersIdPut
        /// </summary>
        [Fact]
        public void UsersIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //UpdateUserRequest updateUserRequest = null;
            //var response = instance.UsersIdPut(id, updateUserRequest);
            //Assert.IsType<PutUserByIdResponse>(response);
        }

        /// <summary>
        /// Test UsersMeGet
        /// </summary>
        [Fact]
        public void UsersMeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersMeGet();
            //Assert.IsType<GetMeResponse>(response);
        }

        /// <summary>
        /// Test UsersPost
        /// </summary>
        [Fact]
        public void UsersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateUserRequest createUserRequest = null;
            //var response = instance.UsersPost(createUserRequest);
            //Assert.IsType<CreateUserResponse>(response);
        }
    }
}
