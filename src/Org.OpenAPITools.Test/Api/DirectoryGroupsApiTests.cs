/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DirectoryGroupsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DirectoryGroupsApiTests : IDisposable
    {
        private DirectoryGroupsApi instance;

        public DirectoryGroupsApiTests()
        {
            instance = new DirectoryGroupsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DirectoryGroupsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DirectoryGroupsApi
            //Assert.IsType<DirectoryGroupsApi>(instance);
        }

        /// <summary>
        /// Test DirectoryGroupsGet
        /// </summary>
        [Fact]
        public void DirectoryGroupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? pageToken = null;
            //int? max = null;
            //var response = instance.DirectoryGroupsGet(pageToken, max);
            //Assert.IsType<GetDirectoryGroupResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdDelete
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DirectoryGroupsIdDelete(id);
            //Assert.IsType<DeleteDirectoryGroupResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdGet
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.DirectoryGroupsIdGet(id);
            //Assert.IsType<GetDirectoryGroupByIdResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdIdentitiesPost
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdIdentitiesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.DirectoryGroupsIdIdentitiesPost(id, requestBody);
            //Assert.IsType<PutDirectoryGroupIdentitiesResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdIdentityIdentityIdDelete
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdIdentityIdentityIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //int identityId = null;
            //var response = instance.DirectoryGroupsIdIdentityIdentityIdDelete(id, identityId);
            //Assert.IsType<DeleteDirectoryGroupIdentityResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdIdentityPost
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdIdentityPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PostDirectoryGroupIdentityRequest postDirectoryGroupIdentityRequest = null;
            //var response = instance.DirectoryGroupsIdIdentityPost(id, postDirectoryGroupIdentityRequest);
            //Assert.IsType<PostDirectoryGroupIdentityResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsIdPut
        /// </summary>
        [Fact]
        public void DirectoryGroupsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PutDirectoryGroupByIdRequest putDirectoryGroupByIdRequest = null;
            //var response = instance.DirectoryGroupsIdPut(id, putDirectoryGroupByIdRequest);
            //Assert.IsType<PutDirectoryGroupByIdResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsPost
        /// </summary>
        [Fact]
        public void DirectoryGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostDirectoryGroupRequest? postDirectoryGroupRequest = null;
            //var response = instance.DirectoryGroupsPost(postDirectoryGroupRequest);
            //Assert.IsType<PostDirectoryGroupResponse>(response);
        }

        /// <summary>
        /// Test DirectoryGroupsUploadPost
        /// </summary>
        [Fact]
        public void DirectoryGroupsUploadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream? file = null;
            //var response = instance.DirectoryGroupsUploadPost(file);
            //Assert.IsType<PostUploadCsvResponse>(response);
        }
    }
}
