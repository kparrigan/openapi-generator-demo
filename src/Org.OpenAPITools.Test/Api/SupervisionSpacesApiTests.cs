/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing SupervisionSpacesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SupervisionSpacesApiTests : IDisposable
    {
        private SupervisionSpacesApi instance;

        public SupervisionSpacesApiTests()
        {
            instance = new SupervisionSpacesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SupervisionSpacesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SupervisionSpacesApi
            //Assert.IsType<SupervisionSpacesApi>(instance);
        }

        /// <summary>
        /// Test SupervisionSpacesGet
        /// </summary>
        [Fact]
        public void SupervisionSpacesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? pageToken = null;
            //int? max = null;
            //var response = instance.SupervisionSpacesGet(pageToken, max);
            //Assert.IsType<GetSupervisionSpacesResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdDelete
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.SupervisionSpacesIdDelete(id);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdDirectoryGroupsDelete
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdDirectoryGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdDirectoryGroupsDelete(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdDirectoryGroupsPost
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdDirectoryGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdDirectoryGroupsPost(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdGet
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.SupervisionSpacesIdGet(id);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdParticipantsDelete
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdParticipantsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //SupervisionSpacesIdParticipantsDeleteRequest supervisionSpacesIdParticipantsDeleteRequest = null;
            //var response = instance.SupervisionSpacesIdParticipantsDelete(id, supervisionSpacesIdParticipantsDeleteRequest);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdParticipantsPost
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdParticipantsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //SupervisionSpacesIdParticipantsPostRequest supervisionSpacesIdParticipantsPostRequest = null;
            //var response = instance.SupervisionSpacesIdParticipantsPost(id, supervisionSpacesIdParticipantsPostRequest);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdPut
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest = null;
            //var response = instance.SupervisionSpacesIdPut(id, postPutSupervisionSpacesRequest);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdUserGroupsDelete
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdUserGroupsDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdUserGroupsDelete(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdUserGroupsPost
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdUserGroupsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdUserGroupsPost(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdUsersDelete
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdUsersDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdUsersDelete(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesIdUsersPost
        /// </summary>
        [Fact]
        public void SupervisionSpacesIdUsersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //var response = instance.SupervisionSpacesIdUsersPost(id, requestBody);
            //Assert.IsType<GetSupervisionSpaceByIdResponse>(response);
        }

        /// <summary>
        /// Test SupervisionSpacesPost
        /// </summary>
        [Fact]
        public void SupervisionSpacesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostPutSupervisionSpacesRequest postPutSupervisionSpacesRequest = null;
            //var response = instance.SupervisionSpacesPost(postPutSupervisionSpacesRequest);
            //Assert.IsType<PostSupervisionSpacesResponse>(response);
        }
    }
}
