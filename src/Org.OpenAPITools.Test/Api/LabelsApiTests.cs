/*
 * Theta Lake API
 *
 * We are excited to inform you that our documentation is interactive!  If you are logged in, this means that you can not only read about the features and capabilities of our product, but also try them out directly from the documentation pages. Our interactive documentation provides a hands-on experience that allows you to test the API endpoints, experiment with the input parameters, and see the corresponding responses. This makes it easier to understand how the API works and how to integrate it into your own applications. With interactive documentation, you can save time and avoid frustration by testing the API right from the documentation pages, without having to set up a local development environment. Whether you're a seasoned developer or just starting out, our interactive documentation is the perfect tool to help you learn, experiment, and succeed with our API. 
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing LabelsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LabelsApiTests : IDisposable
    {
        private LabelsApi instance;

        public LabelsApiTests()
        {
            instance = new LabelsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LabelsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LabelsApi
            //Assert.IsType<LabelsApi>(instance);
        }

        /// <summary>
        /// Test LabelsGet
        /// </summary>
        [Fact]
        public void LabelsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.LabelsGet();
            //Assert.IsType<GetLabelsResponse>(response);
        }

        /// <summary>
        /// Test LabelsIdDelete
        /// </summary>
        [Fact]
        public void LabelsIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.LabelsIdDelete(id);
            //Assert.IsType<GetLabelByIdResponse>(response);
        }

        /// <summary>
        /// Test LabelsIdGet
        /// </summary>
        [Fact]
        public void LabelsIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.LabelsIdGet(id);
            //Assert.IsType<GetLabelByIdResponse>(response);
        }

        /// <summary>
        /// Test LabelsIdPut
        /// </summary>
        [Fact]
        public void LabelsIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //PutLabelByIdRequest putLabelByIdRequest = null;
            //var response = instance.LabelsIdPut(id, putLabelByIdRequest);
            //Assert.IsType<PutLabelByIdResponse>(response);
        }

        /// <summary>
        /// Test LabelsLabelIdRecordsRecordIdDelete
        /// </summary>
        [Fact]
        public void LabelsLabelIdRecordsRecordIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int recordId = null;
            //int labelId = null;
            //var response = instance.LabelsLabelIdRecordsRecordIdDelete(recordId, labelId);
            //Assert.IsType<DeleteLabelFromRecordResponse>(response);
        }

        /// <summary>
        /// Test LabelsLabelIdRecordsRecordIdPost
        /// </summary>
        [Fact]
        public void LabelsLabelIdRecordsRecordIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int labelId = null;
            //int recordId = null;
            //var response = instance.LabelsLabelIdRecordsRecordIdPost(labelId, recordId);
            //Assert.IsType<PostLabelToRecordResponse>(response);
        }

        /// <summary>
        /// Test LabelsPost
        /// </summary>
        [Fact]
        public void LabelsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PostLabelRequest postLabelRequest = null;
            //var response = instance.LabelsPost(postLabelRequest);
            //Assert.IsType<PostLabelResponse>(response);
        }
    }
}
